# Generated by Django 4.1.10 on 2025-02-26 05:09

import autoslug.fields
import colorfield.fields
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import showcase.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AboutBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'About Background Image',
                'verbose_name_plural': 'About Background Images',
            },
        ),
        migrations.CreateModel(
            name='AccountBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Account Background Image',
                'verbose_name_plural': 'Account Background Images',
            },
        ),
        migrations.CreateModel(
            name='Achievements',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(verbose_name='Achievement Title')),
                ('description', models.TextField(verbose_name='Description')),
                ('difficulty', models.CharField(choices=[('M', 'Mild'), ('S', 'Spicy'), ('F', 'Fiery'), ('W', 'Wild'), ('E', 'Explosive')], default='M', max_length=1)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='title', unique=True)),
                ('value', models.IntegerField(blank=True, null=True)),
                ('rubies_spent', models.IntegerField(blank=True, null=True)),
                ('rubies_collected', models.IntegerField(blank=True, null=True)),
                ('total_rubies_earned', models.IntegerField(blank=True, null=True)),
                ('category', models.CharField(blank=True, choices=[('RS', 'Rubies Spent'), ('TRE', 'Total Rubies Earned '), ('RC', 'Rubies Collected'), ('WS', 'Wheels Spun'), ('GCH', 'Green Cards Hit'), ('YCH', 'Yellow Cards Hit'), ('OCH', 'Orange Cards Hit'), ('RCH', 'Red Cards Hit'), ('BCH', 'Black Cards Hit'), ('GOCH', 'Gold Cards Hit'), ('RGCH', 'Red Gold Cards Hit'), ('BW', 'Battles Won'), ('BL', 'Battles Lost'), ('BD', 'Battles Drawn'), ('FA', 'Friends Added'), ('TCS', 'Total Community Size'), ('O', 'Other')], max_length=4, null=True)),
                ('earned', models.BooleanField(default=False)),
                ('green_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('yellow_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('orange_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('red_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('black_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('gold_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('redgold_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Achievement',
                'verbose_name_plural': 'Achievements',
            },
        ),
        migrations.CreateModel(
            name='AddonsBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Addons Background Image',
                'verbose_name_plural': 'Addons Background Images',
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street_address', models.CharField(max_length=100)),
                ('apartment_address', models.CharField(blank=True, max_length=100, null=True)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('zip', models.CharField(max_length=100)),
                ('address_type', models.CharField(choices=[('B', 'Billing'), ('S', 'Shipping')], max_length=1000)),
                ('default', models.BooleanField(default=False)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Is this an active address?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Saved Addresses',
            },
        ),
        migrations.CreateModel(
            name='AdminPages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pages', models.CharField(max_length=30, verbose_name='Administration pages')),
                ('description', models.TextField(default='', help_text='Page description')),
                ('hyperlink', models.CharField(max_length=100, verbose_name='Page hyperlinks')),
                ('opennew', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=False, help_text='Please note all Administration Interface Pages should open in a new tab.', verbose_name='Open In New Tab?')),
                ('section', models.IntegerField(help_text='Position of the page link.', verbose_name='position')),
                ('page_name', models.TextField(blank='True', null='True', verbose_name='Page Name')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Is this an active page?')),
            ],
            options={
                'verbose_name_plural': 'Administrative Pages',
            },
        ),
        migrations.CreateModel(
            name='AdminRoles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(max_length=30, verbose_name='Administration role')),
                ('role_description', models.TextField(blank='True', null='True', verbose_name='Role Overview')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Is this role currently active?')),
            ],
            options={
                'verbose_name_plural': 'Administrative Roles',
            },
        ),
        migrations.CreateModel(
            name='AdminTasks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task', models.CharField(max_length=30, verbose_name='Administration tasks')),
                ('hyperlink', models.CharField(blank='True', help_text='Only add if necessary', max_length=100, null='True', verbose_name='Task hyperlink')),
                ('opennew', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=False, help_text='Please note all Administration Interface Pages should open in a new tab.', verbose_name='Open In New Tab?')),
                ('section', models.IntegerField(help_text='Position of the page link.', verbose_name='position')),
                ('page_name', models.TextField(blank='True', null='True', verbose_name='Page Name')),
                ('image', models.ImageField(upload_to='', verbose_name='Task image')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('length_for_resize', models.PositiveIntegerField(default=100, verbose_name='Resized Length')),
                ('width_for_resize', models.PositiveIntegerField(default=100, verbose_name='Resized Width')),
                ('alternate', models.TextField(verbose_name='Alternate text')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Is this task currently active?')),
            ],
            options={
                'verbose_name_plural': 'Administrative Tasks',
            },
        ),
        migrations.CreateModel(
            name='AdvertisementBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('advertisementtitle', models.CharField(help_text='Advertisement title.', max_length=100, verbose_name='advertisement title')),
                ('advertisement', models.ImageField(height_field='advertisement_width', help_text='Image of the advertisement.', upload_to='images/', width_field='advertisement_length')),
                ('advertisement_file', models.FileField(blank=True, null=True, upload_to='images/', verbose_name='Non-image File')),
                ('advertisement_length', models.PositiveIntegerField(blank=True, default='100', help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='advertisement length')),
                ('advertisement_width', models.PositiveIntegerField(blank=True, default='100', help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='advertisement width')),
                ('length_for_resize', models.PositiveIntegerField(default=100, verbose_name='Resized Length')),
                ('width_for_resize', models.PositiveIntegerField(default=100, verbose_name='Resized Width')),
                ('advertisement_position', models.IntegerField(help_text='Positioning of the advertisement.', verbose_name='Position')),
                ('page', models.TextField(verbose_name='Page Name')),
                ('xposition', models.IntegerField(help_text='x-position.', verbose_name='x-position')),
                ('yposition', models.IntegerField(help_text='x-position.', verbose_name='y-position')),
                ('relevance', models.TextField(help_text='Relevance of advertisement')),
                ('type', models.CharField(help_text='Type of product.', max_length=200)),
                ('advertisement_hyperlink', models.TextField(verbose_name='Hyperlink')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Advertisement Base',
                'verbose_name_plural': 'Advertisement Base',
            },
        ),
        migrations.CreateModel(
            name='Affiliation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=200)),
                ('flavor_text', models.TextField()),
                ('icon', models.ImageField(upload_to='')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
        ),
        migrations.CreateModel(
            name='BackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
                ('page', models.TextField()),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Background Image',
                'verbose_name_plural': 'Background Images',
            },
        ),
        migrations.CreateModel(
            name='BackgroundImageBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('backgroundtitle', models.TextField(blank=True, null=True, verbose_name='Background Title')),
                ('cover', models.ImageField(blank=True, null=True, upload_to='images/', verbose_name='Images')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Width of the image (in percent relative).', null=True, verbose_name='image width')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Length of the image (in percent relative).', null=True, verbose_name='image length')),
                ('file', models.FileField(blank=True, null=True, upload_to='images/', verbose_name='Non-image File')),
                ('alternate', models.TextField(blank=True, null=True, verbose_name='Alternate Text')),
                ('page', models.TextField(verbose_name='Page Name')),
                ('url', models.CharField(blank=True, max_length=250, null=True, verbose_name='Page URL')),
                ('position', models.IntegerField(blank=True, null=True, verbose_name='Image Position')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Background Image Base',
                'verbose_name_plural': 'Background Image Base',
            },
        ),
        migrations.CreateModel(
            name='BanAppeal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Your name and tag go here.', max_length=100)),
                ('Rule_broken', models.CharField(help_text='Tell us the numbers of the rule(s) you broke. Refer to our rules page to see the rules and their corresponding numbers.', max_length=200)),
                ('Why_I_should_have_my_ban_revoked', models.TextField(help_text='Tell us why we should unban you, and tell us you can do to fix your mistake. If you think your punishment is a mistake, tell us why.', verbose_name='Why I should have my ban revoked.')),
                ('Additional_comments', models.TextField(help_text='Put any additional evidence or comments you may have here.')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Ban Appeal',
                'verbose_name_plural': 'Ban Appeals',
            },
        ),
        migrations.CreateModel(
            name='BanAppealBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Ban Appliciations Background Image',
                'verbose_name_plural': 'Ban Applications Background Images',
            },
        ),
        migrations.CreateModel(
            name='BaseCopyrightTextField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('copyright', models.TextField(help_text='Copyright And Year', verbose_name='Copyright Field')),
                ('page', models.TextField(verbose_name='Page Name')),
                ('hyperlink', models.TextField(verbose_name='Hyperlink')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Base Text Field Copyright',
                'verbose_name_plural': 'Base Text Field Copyright',
            },
        ),
        migrations.CreateModel(
            name='Battle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('battle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('price', models.DecimalField(blank=True, decimal_places=0, max_digits=12, null=True)),
                ('min_human_participants', models.PositiveIntegerField(default=0, help_text='Minimum number of human participants required.', validators=[django.core.validators.MinValueValidator(0)])),
                ('game_values', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('O', 'Open'), ('R', 'Running'), ('C', 'Complete')], default='O', max_length=1)),
                ('slots', models.CharField(choices=[('2', '1v1'), ('3', '1v1v1'), ('4', '1v1v1v1'), ('5', '1ve5'), ('6', '1ve6'), ('7', '1ve7'), ('8', '1ve8'), ('9', '1ve9'), ('10', '1ve10'), ('2v2', '2v2'), ('2ve3', '2v2v2'), ('2ve4', '2v2v2v2'), ('2ve5', '2ve5'), ('3v3', '3v3'), ('3ve3', '3v3v3'), ('4v4', '4v4'), ('5v5', '5v5')], default='2', max_length=4)),
                ('type', models.CharField(choices=[('Free For All', 'Free For All'), ('upside_down', 'Upside-Down'), ('teams', 'Teams'), ('dual_win', 'Dual Win'), ('team_fight', 'Team Fight'), ('do_not_lose', 'Do Not Lose'), ('share', 'Share')], default='Free For All', max_length=20)),
                ('team_battle', models.BooleanField(default=False)),
                ('bets_allowed', models.BooleanField(default=False)),
                ('time', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Battle',
                'verbose_name_plural': 'Battles',
            },
        ),
        migrations.CreateModel(
            name='BilletBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Billet Background Image',
                'verbose_name_plural': 'Billet Background Images',
            },
        ),
        migrations.CreateModel(
            name='BlackJack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='BlackJack Game Name')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'BlackJack Game',
                'verbose_name_plural': 'BlackJack Games',
            },
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, unique=True)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('type', models.CharField(blank=True, choices=[('F', 'Featured'), ('N', 'New'), ('P', 'Popular'), ('EC', "Editor's Choice")], max_length=2, null=True)),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='updated on: ')),
                ('content', models.TextField()),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('position', models.IntegerField(blank=True, null=True)),
                ('minute_read', models.IntegerField(blank=True, null=True, verbose_name='Time to read (in minutes)')),
                ('status', models.IntegerField(choices=[(0, 'Draft'), (1, 'Publish')], default=0)),
                ('image', models.ImageField(upload_to='images/')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Blog Entry',
                'verbose_name_plural': 'Blog Entries',
                'ordering': ['-created_on'],
            },
        ),
        migrations.CreateModel(
            name='BlogBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(verbose_name='Title')),
                ('cover', models.ImageField(upload_to='images/', verbose_name='Cover')),
            ],
            options={
                'verbose_name': 'Blog Background Image',
                'verbose_name_plural': 'Blog Background Images',
            },
        ),
        migrations.CreateModel(
            name='BlogFilter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blog_filter', models.CharField(blank=True, max_length=200, null=True, verbose_name='Hashtag filters')),
                ('clicks', models.IntegerField(blank=True, null=True, verbose_name='Popularity')),
                ('image', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Filter Image')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Blog Filter',
                'verbose_name_plural': 'Blog Filters',
            },
        ),
        migrations.CreateModel(
            name='BlogHeader',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=200, verbose_name='Category')),
                ('image', models.ImageField(upload_to='images/')),
                ('position', models.IntegerField(default=1, verbose_name='Position')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Blog Header',
                'verbose_name_plural': 'Blog Headers',
            },
        ),
        migrations.CreateModel(
            name='BusinessMailingContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('email', models.EmailField(max_length=200, verbose_name='Recipient')),
                ('inquiry', models.CharField(max_length=100)),
                ('message', models.TextField()),
            ],
            options={
                'verbose_name': 'Business Mailing Message',
                'verbose_name_plural': 'Business Mailing Messages',
            },
        ),
        migrations.CreateModel(
            name='BusinessMessageBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Business Message Background Image',
                'verbose_name_plural': 'Business Message Background Images',
            },
        ),
        migrations.CreateModel(
            name='CardCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=200)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Card Category',
                'verbose_name_plural': 'Card Categories',
            },
        ),
        migrations.CreateModel(
            name='ChangePasswordBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Change Password Background Image',
                'verbose_name_plural': 'Change Password Background Images',
            },
        ),
        migrations.CreateModel(
            name='ChatBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Chat Background Image',
                'verbose_name_plural': 'Chat Background Images',
            },
        ),
        migrations.CreateModel(
            name='CheckoutBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Checkout Background Image',
                'verbose_name_plural': 'Checkout Background Images',
            },
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice_text', models.CharField(blank=True, max_length=200, null=True, verbose_name='Name')),
                ('file', models.FileField(blank=True, null=True, upload_to='', verbose_name='File')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('color', models.CharField(blank=True, choices=[('Gra', 'Gray'), ('Gre', 'Green'), ('Y', 'Yellow'), ('O', 'Orange'), ('R', 'Red'), ('B', 'Black'), ('G', 'Gold')], max_length=3, null=True)),
                ('votes', models.IntegerField(default=0)),
                ('category', models.CharField(blank=True, choices=[('P', 'Pokemon'), ('M', 'Magic The Gathering'), ('B', 'Bakugo'), ('Y', 'Yu-Gi-Oh!'), ('A', 'Anime'), ('O', 'Other')], max_length=2, null=True)),
                ('subcategory', models.CharField(blank=True, help_text='Subcategory of choice (Pokemon, trainers, etc.).', max_length=200, null=True)),
                ('mfg_date', models.DateTimeField(auto_now_add=True, verbose_name='date')),
                ('tier', models.CharField(blank=True, choices=[('C', 'Common'), ('U', 'Uncommon'), ('R', 'Rare'), ('E', 'Epic'), ('M', 'Mythical'), ('T', 'Transcendent'), ('P', 'Primordial'), ('L', 'Legendary'), ('U', 'Ultimate')], max_length=1, null=True)),
                ('rarity', models.DecimalField(blank=True, decimal_places=6, help_text='Rarity of choice in percent (optional).', max_digits=9, null=True, verbose_name='Rarity (%)')),
                ('condition', models.CharField(blank=True, choices=[('M', 'Mint'), ('NM', 'Near Mint'), ('MP', 'Moderately Played'), ('HP', 'Heavily Played'), ('D', 'Damaged')], default='M', max_length=2, null=True)),
                ('number_of_choice', models.IntegerField(default=1)),
                ('total_number_of_choice', models.IntegerField(blank=True, null=True)),
                ('lower_nonce', models.IntegerField(blank=True, help_text='Lower bound nonce of Choice', null=True, validators=[django.core.validators.MaxValueValidator(1000000), django.core.validators.MinValueValidator(0)])),
                ('upper_nonce', models.IntegerField(blank=True, help_text='Upper bound nonce of Choice', null=True, validators=[django.core.validators.MaxValueValidator(1000000), django.core.validators.MinValueValidator(0)])),
                ('generated_nonce', models.IntegerField(blank=True, help_text='Do NOT fill out manually.', null=True, validators=[django.core.validators.MaxValueValidator(1000000), django.core.validators.MinValueValidator(0)], verbose_name='Generated Nonce')),
                ('nodes', models.IntegerField(blank=True, help_text='Number of the choice included', null=True, verbose_name='Quantity Displayed')),
                ('value', models.IntegerField(blank=True, help_text='Value of item in Rubicoins.', null=True, verbose_name='Value (Rubicoins)')),
                ('number', models.IntegerField(blank=True, default=1, help_text='Position ordered by value (from highest to lowest)', null=True)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Choice',
                'verbose_name_plural': 'Choices',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Cities',
            },
        ),
        migrations.CreateModel(
            name='CommitmentBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Commitment Background Image',
                'verbose_name_plural': 'Commitment Background Images',
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('email', models.EmailField(max_length=200, verbose_name='Recipient')),
                ('inquiry', models.CharField(max_length=100, verbose_name='Subject')),
                ('message', models.TextField()),
            ],
            options={
                'verbose_name': 'Contact Message',
                'verbose_name_plural': 'Contact Messages',
            },
        ),
        migrations.CreateModel(
            name='ContactBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Contact Background Image',
                'verbose_name_plural': 'Contact Background Images',
            },
        ),
        migrations.CreateModel(
            name='ContentBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Content Background Image',
                'verbose_name_plural': 'Content Background Images',
            },
        ),
        migrations.CreateModel(
            name='ContributorBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Contributors Background Image',
                'verbose_name_plural': 'Contributors Background Images',
            },
        ),
        migrations.CreateModel(
            name='ConvertBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Convert Background Image',
                'verbose_name_plural': 'Convert Background Images',
            },
        ),
        migrations.CreateModel(
            name='CostBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Cost Background Image',
                'verbose_name_plural': 'Cost Background Images',
            },
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=150)),
                ('amount', models.FloatField()),
                ('percentDollars', models.BooleanField(default=False, verbose_name='Percent-off Coupon')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Is this an active coupon?')),
            ],
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Rubies', max_length=200)),
                ('code', models.CharField(default='usd', max_length=3)),
                ('flavor_text', models.CharField(max_length=200)),
                ('file', models.FileField(null=True, upload_to='', verbose_name='Sprite')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('mfg_date', models.DateTimeField(auto_now_add=True, verbose_name='date')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'PokeTrove Currency',
                'verbose_name_plural': 'PokeTrove Currencies',
            },
        ),
        migrations.CreateModel(
            name='CurrencyMarket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('amount', models.IntegerField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('discount_price', models.FloatField(blank=True, null=True)),
                ('slug', models.SlugField()),
                ('unit_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('deal', models.BooleanField(default=False)),
                ('label', models.CharField(blank=True, choices=[('N', 'New'), ('BS', 'Best Seller'), ('BV', 'Best Value')], max_length=1000, null=True)),
                ('flavor_text', models.CharField(max_length=200)),
                ('file', models.FileField(null=True, upload_to='', verbose_name='Sprite')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('mfg_date', models.DateTimeField(auto_now_add=True, verbose_name='date')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.currency')),
            ],
            options={
                'verbose_name': 'Currency Market',
                'verbose_name_plural': 'Currency Markets',
            },
        ),
        migrations.CreateModel(
            name='CurrencyOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('ref_code', models.CharField(blank=True, max_length=20, null=True)),
                ('slug', models.SlugField()),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('ordered_date', models.DateTimeField(blank=True, null=True)),
                ('ordered', models.BooleanField(default=False)),
                ('being_delivered', models.BooleanField(default=False)),
                ('received', models.BooleanField(default=False)),
                ('refund_requested', models.BooleanField(default=False)),
                ('refund_granted', models.BooleanField(default=False)),
                ('quantity', models.IntegerField(default=1)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Is this an active order?')),
                ('billing_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='currency_billing_address', to='showcase.address')),
                ('coupon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='showcase.coupon')),
                ('itemhistory', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='currency_item_history', to='showcase.currencymarket', verbose_name='Order history')),
                ('items', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='showcase.currencymarket')),
            ],
            options={
                'verbose_name': 'Individiual Currency Order',
                'verbose_name_plural': 'Individiual Currency Orders',
            },
        ),
        migrations.CreateModel(
            name='DefaultAvatar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_avatar_name', models.CharField(blank=True, max_length=300, null=True)),
                ('default_avatar', models.ImageField(upload_to='images/')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Default Avatar',
                'verbose_name_plural': 'Default Avatars',
            },
        ),
        migrations.CreateModel(
            name='DonateIcon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('row', models.IntegerField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Donation Icon',
                'verbose_name_plural': 'Donation Icons',
            },
        ),
        migrations.CreateModel(
            name='EBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Ecommerce Background Image',
                'verbose_name_plural': 'Ecommerce Background Images',
            },
        ),
        migrations.CreateModel(
            name='Endowment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('experience_increase', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.currency')),
            ],
            options={
                'verbose_name': 'Endowment',
                'verbose_name_plural': 'Endowments',
            },
        ),
        migrations.CreateModel(
            name='EventBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Event Background Image',
                'verbose_name_plural': 'Event Background Images',
            },
        ),
        migrations.CreateModel(
            name='FaqBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'FAQ Background Image',
                'verbose_name_plural': 'FAQ Background Images',
            },
        ),
        migrations.CreateModel(
            name='FaviconBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('favicontitle', models.TextField(verbose_name='Favicon Title')),
                ('faviconcover', models.ImageField(upload_to='images/', verbose_name='Favicon')),
                ('favicon_length', models.PositiveIntegerField(blank=True, default='100', help_text='Original length of the favicon (use for original ratio).', null=True, verbose_name='favicon length')),
                ('favicon_width', models.PositiveIntegerField(blank=True, default='100', help_text='Original width of the favicon (use for original ratio).', null=True, verbose_name='favicon width')),
                ('length_for_resize', models.PositiveIntegerField(default=100, verbose_name='Resized Length')),
                ('width_for_resize', models.PositiveIntegerField(default=100, verbose_name='Resized Width')),
                ('faviconpage', models.TextField(verbose_name='Page Name')),
                ('faviconurl', models.URLField(verbose_name='Page URL')),
                ('faviconlink', models.URLField(verbose_name='Favicon Link')),
                ('faviconsizes', models.TextField(help_text='example: 180x180', verbose_name='Favicon Sizes')),
                ('faviconrelationship', models.TextField(help_text='example: icon', verbose_name='Favicon Relationship')),
                ('favicontype', models.TextField(help_text='example: ico', verbose_name='Favicon Type')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Favicon',
                'verbose_name_plural': 'Favicons',
            },
        ),
        migrations.CreateModel(
            name='FeaturedNavigationBar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_header', models.TextField(blank=True, default='IntelleX', help_text="Only set if occupying 1'st position", null=True, verbose_name='Heading')),
                ('text', models.TextField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Navigational image')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Width of the image (in percent relative).', null=True, verbose_name='image width')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Length of the image (in percent relative).', null=True, verbose_name='image length')),
                ('url', models.TextField(blank=True, null=True)),
                ('position', models.IntegerField()),
                ('opennew', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=False, verbose_name='Open In New Tab?')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Featured Navigation Bar',
                'verbose_name_plural': 'Featured Navigation Bar',
            },
        ),
        migrations.CreateModel(
            name='FeedbackBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Feedback Background Image',
                'verbose_name_plural': 'Feedback Background Images',
            },
        ),
        migrations.CreateModel(
            name='FileBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_field', models.FileField(blank=True, null=True, upload_to='', verbose_name='File Field')),
            ],
        ),
        migrations.CreateModel(
            name='FrequentlyAskedQuestions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
                ('position', models.IntegerField(default=1, help_text='Positioning of the image within the carousel.', verbose_name='position')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Frequently-Asked Question',
                'verbose_name_plural': 'Frequently-Asked Questions',
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Game Name')),
                ('cost', models.IntegerField(blank=True, default=0, null=True)),
                ('discount_cost', models.IntegerField(blank=True, null=True)),
                ('category', models.CharField(blank=True, choices=[('P', 'Pokemon'), ('M', 'Magic The Gathering'), ('B', 'Bakugo'), ('Y', 'Yu-Gi-Oh!'), ('A', 'Anime'), ('O', 'Other')], max_length=2, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('power_meter', models.CharField(choices=[('1', 'x1'), ('2', 'x2'), ('5', 'x5'), ('10', 'x10'), ('100', 'x100'), ('1000', 'x1000')], default=1, max_length=4)),
                ('slug', models.SlugField(blank=True, max_length=200, null=True, unique=True)),
                ('filter', models.CharField(blank=True, choices=[('F', 'Featured'), ('P', 'Popular'), ('N', 'New')], max_length=1, null=True)),
                ('player_made', models.BooleanField(default=True)),
                ('player_inventory', models.BooleanField(default=True)),
                ('date_and_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='date and time')),
                ('daily', models.BooleanField(default=False)),
                ('cooldown', models.DateTimeField(blank=True, null=True)),
                ('locked', models.BooleanField(default=True)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('choices', models.ManyToManyField(blank=True, related_name='gamechoices', to='showcase.choice')),
            ],
            options={
                'verbose_name': 'Game',
                'verbose_name_plural': 'Games',
            },
        ),
        migrations.CreateModel(
            name='GameHub',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Game Hub Name')),
                ('type', models.CharField(blank=True, choices=[('T', 'Traditional'), ('C', 'Club')], max_length=1, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('filter', models.CharField(blank=True, choices=[('F', 'Featured'), ('P', 'Popular'), ('N', 'New')], max_length=1, null=True)),
                ('description', models.CharField(max_length=2000)),
                ('slug', models.SlugField(blank=True, max_length=200, null=True, unique=True)),
                ('date_and_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='date and time')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Game Hub',
                'verbose_name_plural': 'Game Hub',
            },
        ),
        migrations.CreateModel(
            name='HyperlinkBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_text', models.TextField(blank=True, help_text='Display text', null=True, verbose_name='Text Display')),
                ('display_image', models.ImageField(blank=True, help_text='Display an image', null=True, upload_to='images/', verbose_name='Image Display')),
                ('hyperlink', models.TextField(verbose_name='Hyperlink')),
                ('section', models.IntegerField(verbose_name='Page Section')),
                ('page', models.TextField(verbose_name='Page Name')),
                ('alternate', models.TextField(blank=True, help_text='Alternate text for Display Image', null=True, verbose_name='Alternate Text')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('length_for_resize', models.PositiveIntegerField(default=100, verbose_name='Resized Length')),
                ('width_for_resize', models.PositiveIntegerField(default=100, verbose_name='Resized Width')),
                ('hyperlink_type', models.IntegerField(blank=True, choices=[(4, 'Home Hyperlink'), (3, 'Member Hyperlink'), (2, 'Administration Hyperlink'), (2, 'Form Hyperlink'), (1, 'Store Hyperlink'), (0, 'Other')], default=4, help_text='Pick the type of hyperlink (optional)', null=True, verbose_name='Hyperlink Type')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Hyperlink Base',
                'verbose_name_plural': 'Hyperlink Base',
            },
        ),
        migrations.CreateModel(
            name='Idea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('category', models.CharField(max_length=100)),
                ('profile_number', models.PositiveIntegerField(default=0, editable=False)),
                ('description', models.TextField()),
                ('image', models.ImageField(help_text='Attach an image for your idea (scales to your picture`s dimensions).', upload_to='')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Idea',
                'verbose_name_plural': 'Ideas',
            },
        ),
        migrations.CreateModel(
            name='InformationBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Information Background Image',
                'verbose_name_plural': 'Information Background Images',
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text="Name your inventory. Leave blank to use (your name)'s inventory", max_length=200, null=True, verbose_name='Inventory Name')),
                ('number_of_cards', models.IntegerField(blank=True, null=True)),
                ('image', models.ImageField(help_text='Inventory Image.', upload_to='')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the inventory (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the inventory (use for original ratio).', null=True, verbose_name='image width')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Player Inventory',
                'verbose_name_plural': 'Player Inventories',
            },
        ),
        migrations.CreateModel(
            name='InventoryObject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice_text', models.CharField(blank=True, max_length=200, null=True, verbose_name='Choice Text')),
                ('category', models.CharField(choices=[('G', 'Gold'), ('P', 'Platinum'), ('E', 'Emerald'), ('D', 'Diamond')], max_length=2)),
                ('price', models.IntegerField(default=0)),
                ('trade_locked', models.BooleanField(default=False, verbose_name='Set Tradable?')),
                ('condition', models.CharField(blank=True, choices=[('M', 'Mint'), ('NM', 'Near Mint'), ('MP', 'Moderately Played'), ('HP', 'Heavily Played'), ('D', 'Damaged')], default='M', max_length=2, null=True)),
                ('quantity', models.IntegerField(default=1, help_text='Number of items available.')),
                ('image', models.ImageField(blank=True, null=True, upload_to='')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('length_for_resize', models.PositiveIntegerField(default=100, verbose_name='Resized Length')),
                ('width_for_resize', models.PositiveIntegerField(default=100, verbose_name='Resized Width')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creation Time')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('choice', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.choice')),
                ('currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.currency')),
                ('inventory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.inventory')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Player Inventory Object',
                'verbose_name_plural': 'Player Inventory Objects',
            },
        ),
        migrations.CreateModel(
            name='IssueBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Issue Background Image',
                'verbose_name_plural': 'Issue Background Images',
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=16, null=True)),
                ('currency_price', models.IntegerField(blank=True, null=True)),
                ('is_currency_based', models.BooleanField(default=False)),
                ('fees', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('discount_price', models.DecimalField(blank=True, decimal_places=2, max_digits=16, null=True)),
                ('discount_currency_price', models.IntegerField(blank=True, null=True)),
                ('category', models.CharField(choices=[('G', 'Gold'), ('P', 'Platinum'), ('E', 'Emerald'), ('D', 'Diamond')], max_length=2)),
                ('card_category', models.CharField(choices=[('P', 'Pokemon'), ('M', 'Magic The Gathering'), ('B', 'Bakugo'), ('Y', 'Yu-Gi-Oh!'), ('A', 'Anime'), ('O', 'Other')], default='P', max_length=1)),
                ('condition', models.CharField(blank=True, choices=[('M', 'Mint'), ('NM', 'Near Mint'), ('MP', 'Moderately Played'), ('HP', 'Heavily Played'), ('D', 'Damaged')], default='M', max_length=2, null=True)),
                ('specialty', models.CharField(blank=True, choices=[('F', 'Featured'), ('P', 'Popular'), ('PR', 'Premium'), ('LE', 'Limited Edition')], max_length=2, null=True)),
                ('label', models.CharField(choices=[('N', 'New'), ('BS', 'Best Seller'), ('BV', 'Best Value')], default='N', max_length=1000)),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('status', models.IntegerField(choices=[(0, 'Draft'), (1, 'Publish')], default=1)),
                ('description', models.TextField()),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('length_for_resize', models.PositiveIntegerField(default=100, verbose_name='Resized Length')),
                ('width_for_resize', models.PositiveIntegerField(default=100, verbose_name='Resized Width')),
                ('image', models.ImageField(upload_to='')),
                ('multi_listing', models.BooleanField(default=False)),
                ('quantity', models.IntegerField(default=1)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Out of stock?')),
                ('currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.currency')),
                ('relateditems', models.ManyToManyField(blank=True, to='showcase.item', verbose_name='Related Items:')),
            ],
        ),
        migrations.CreateModel(
            name='ItemFilter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_filter', models.CharField(blank=True, max_length=200, null=True, verbose_name='Hashtag filters')),
                ('clicks', models.IntegerField(blank=True, null=True, verbose_name='Popularity')),
                ('image', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Filter Image')),
                ('category', models.IntegerField(blank=True, choices=[(1, 'Yes'), (0, 'No')], default=0, help_text='1->Yes, 0->No', null=True, verbose_name='Make the Filter a Category?')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Item Filter',
                'verbose_name_plural': 'Item Filters',
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(blank=True, default=1, null=True)),
                ('level_name', models.CharField(max_length=200)),
                ('experience', models.IntegerField(blank=True, default=0, null=True)),
                ('full_row', models.BooleanField(default=True)),
                ('icon', models.ImageField(blank=True, null=True, upload_to='')),
                ('color_wheel', colorfield.fields.ColorField(blank=True, default=None, image_field=None, max_length=18, null=True, samples=[('#FFFFFF', 'white'), ('#000000', 'black')])),
                ('color', models.CharField(blank=True, help_text='Comma-separated hex colors for gradient', max_length=500, null=True)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('affiliation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.affiliation')),
                ('games', models.ManyToManyField(blank=True, limit_choices_to={'daily': True}, related_name='levels', to='showcase.game', verbose_name='Games with Daily Mode')),
            ],
            options={
                'verbose_name': 'Level',
                'verbose_name_plural': 'Levels',
                'ordering': ['level'],
            },
        ),
        migrations.CreateModel(
            name='LogoBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(verbose_name='Background Title')),
                ('logocover', models.ImageField(upload_to='images/', verbose_name='Logo')),
                ('hyperlink', models.TextField(verbose_name='Hyperlink')),
                ('section', models.IntegerField(default=1, verbose_name='Page Section')),
                ('page', models.TextField(verbose_name='Page Name')),
                ('alternate', models.TextField(verbose_name='Alternate Text')),
                ('logo_length', models.PositiveIntegerField(blank=True, default='100', help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='logo length')),
                ('logo_width', models.PositiveIntegerField(blank=True, default='100', help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='logo width')),
                ('length_for_resize', models.PositiveIntegerField(default=100, verbose_name='Resized Length')),
                ('width_for_resize', models.PositiveIntegerField(default=100, verbose_name='Resized Width')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Logo',
                'verbose_name_plural': 'Logos',
            },
        ),
        migrations.CreateModel(
            name='Lottery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Daily Lotto', max_length=200)),
                ('flavor_text', models.CharField(max_length=200)),
                ('file_path', models.CharField(blank=True, max_length=500, null=True)),
                ('slug', models.SlugField(blank=True, max_length=200, null=True, unique=True)),
                ('profile_number', models.PositiveIntegerField(default=0, editable=False)),
                ('maximum_tickets', models.PositiveIntegerField(blank=True, null=True)),
                ('price', models.PositiveIntegerField(default=0)),
                ('file', models.FileField(null=True, upload_to='', verbose_name='Sprite')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('mfg_date', models.DateTimeField(auto_now_add=True, verbose_name='date')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.currency')),
            ],
            options={
                'verbose_name': 'Lottery',
                'verbose_name_plural': 'Lotteries',
            },
        ),
        migrations.CreateModel(
            name='MantenienceBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Mantenience Background Image',
                'verbose_name_plural': 'Mantenience Background Images',
            },
        ),
        migrations.CreateModel(
            name='MegaBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Mega Background Image',
                'verbose_name_plural': 'Mega Background Images',
            },
        ),
        migrations.CreateModel(
            name='MemberHomeBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Member Home Background Image',
                'verbose_name_plural': 'Member Home Background Images',
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Rubies', max_length=200)),
                ('tier', models.CharField(blank=True, choices=[('S', 'Sapphire'), ('R', 'Ruby'), ('E', 'Emerald'), ('D', 'Diamond'), ('?', '???')], max_length=2, null=True)),
                ('file', models.FileField(null=True, upload_to='', verbose_name='Sprite')),
                ('description', models.TextField(blank=True, null=True)),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('price', models.FloatField(default=0)),
                ('discount_price', models.FloatField(blank=True, null=True)),
                ('second_price', models.FloatField(blank=True, null=True)),
                ('second_discount_price', models.FloatField(blank=True, null=True)),
                ('mfg_date', models.DateTimeField(auto_now_add=True, verbose_name='date')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Membership Tier',
                'verbose_name_plural': 'Membership Tiers',
            },
        ),
        migrations.CreateModel(
            name='Meme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('image', models.ImageField(upload_to='images/')),
                ('font_size', models.IntegerField(blank=True, null=True, verbose_name='Font Size')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Meme Creator')),
            ],
            options={
                'verbose_name': 'Meme Text',
                'verbose_name_plural': 'Meme Texts',
            },
        ),
        migrations.CreateModel(
            name='Monstrosity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monstrositys_name', models.CharField(blank=True, max_length=200, null=True, unique=True, verbose_name='Monstrosity Name')),
                ('experience', models.IntegerField(default=0)),
                ('level', models.IntegerField(default=1)),
                ('currency_amount', models.IntegerField(default=0)),
                ('feed_amount', models.IntegerField(default=0)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.currency')),
            ],
            options={
                'verbose_name': 'Monstrosity',
                'verbose_name_plural': 'Monstrosities',
            },
        ),
        migrations.CreateModel(
            name='MonstrositySprite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('image', models.ImageField(upload_to='images/')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Monstrosity Sprite',
                'verbose_name_plural': 'Monstrosity Sprites',
            },
        ),
        migrations.CreateModel(
            name='NavBar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('url', models.TextField(blank=True, null=True)),
                ('row', models.IntegerField()),
                ('position', models.IntegerField(blank=True, null=True)),
                ('opennew', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=False, verbose_name='Open In New Tab?')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Navigational Bar Dropdown',
                'verbose_name_plural': 'Navigational Bar Dropdowns',
            },
        ),
        migrations.CreateModel(
            name='NavBarHeader',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='This is a header.')),
                ('section', models.TextField(blank=True, help_text='ID Section of page.', max_length=200, null=True)),
                ('row', models.IntegerField(blank=True, null=True)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Navigational Bar Header',
                'verbose_name_plural': 'Navigational Bar Headers',
            },
        ),
        migrations.CreateModel(
            name='NewsBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'News Background Image',
                'verbose_name_plural': 'News Background Images',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ManyToManyField(related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref_code', models.CharField(blank=True, max_length=20, null=True)),
                ('orderprice', models.FloatField(blank=True, null=True, verbose_name='Order price')),
                ('currencyorderprice', models.IntegerField(blank=True, null=True, verbose_name='Currency order price')),
                ('feedback_url', models.URLField(blank=True)),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('ordered_date', models.DateTimeField()),
                ('ordered', models.BooleanField(default=False)),
                ('being_delivered', models.BooleanField(default=False)),
                ('received', models.BooleanField(default=False)),
                ('refund_requested', models.BooleanField(default=False)),
                ('refund_granted', models.BooleanField(default=False)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Is this an active order?')),
                ('billing_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='billing_address', to='showcase.address')),
                ('coupon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='showcase.coupon')),
                ('itemhistory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.item', verbose_name='Order history')),
            ],
        ),
        migrations.CreateModel(
            name='OrderBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Order Background Image',
                'verbose_name_plural': 'Order Background Images',
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('ordered', models.BooleanField(default=False)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('slug', models.SlugField(blank=True, help_text='Leave blank to use corresponding product slug.', max_length=200, null=True)),
                ('image', models.ImageField(upload_to='')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('quantity', models.IntegerField(default=1)),
                ('order_date', models.DateTimeField(auto_now_add=True, verbose_name='Order date')),
                ('orderprice', models.FloatField(blank=True, null=True, verbose_name='Order price')),
                ('currencyorderprice', models.IntegerField(blank=True, null=True, verbose_name='Curency order price')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.item')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Order Items',
            },
        ),
        migrations.CreateModel(
            name='PartnerBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Partner Background Image',
                'verbose_name_plural': 'Partner Background Images',
            },
        ),
        migrations.CreateModel(
            name='Patreon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patreon_username', models.CharField(help_text='The patreon`s username goes here.', max_length=100, verbose_name='Patreon`s Username')),
                ('description', models.TextField(help_text='Description of Patreon`s patreonage.')),
                ('image', models.ImageField(help_text='The patreon`s avatar goes here.', upload_to='')),
            ],
            options={
                'verbose_name': 'Patreon',
                'verbose_name_plural': 'Patreons',
            },
        ),
        migrations.CreateModel(
            name='PatreonBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Patreon Background Image',
                'verbose_name_plural': 'Patreon Background Images',
            },
        ),
        migrations.CreateModel(
            name='PerksBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Perks Background Image',
                'verbose_name_plural': 'Perks Background Images',
            },
        ),
        migrations.CreateModel(
            name='PollQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.CharField(max_length=500, verbose_name='Question')),
                ('pub_date', models.DateTimeField(auto_now_add=True, verbose_name='date published')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('choice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.choice')),
            ],
            options={
                'verbose_name': 'Poll Question',
                'verbose_name_plural': 'Poll Questions',
            },
        ),
        migrations.CreateModel(
            name='PostBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Idea Background Image',
                'verbose_name_plural': 'Idea Background Images',
            },
        ),
        migrations.CreateModel(
            name='PosteBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Idea Background Image',
                'verbose_name_plural': 'Idea Background Images',
            },
        ),
        migrations.CreateModel(
            name='PriceBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Price Background Image',
                'verbose_name_plural': 'Price Background Images',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('description', models.TextField()),
                ('label', models.CharField(choices=[('N', 'New'), ('BS', 'Best Seller'), ('BV', 'Best Value')], default='N', max_length=1000)),
                ('mfg_date', models.DateTimeField(auto_now_add=True)),
                ('rating', models.CharField(choices=[('b', 'Bad'), ('a', 'Average'), ('e', 'Excellent')], max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='ProductBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Product Background Image',
                'verbose_name_plural': 'Product Background Images',
            },
        ),
        migrations.CreateModel(
            name='ProfileCurrency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=0)),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.currency')),
            ],
        ),
        migrations.CreateModel(
            name='PunishAppsBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Punishment Applications Background Image',
                'verbose_name_plural': 'Punishment Applications Background Images',
            },
        ),
        migrations.CreateModel(
            name='ReasonsBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Reasons Background Image',
                'verbose_name_plural': 'Reasons Background Images',
            },
        ),
        migrations.CreateModel(
            name='RespondingTradeOffer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trade_offer_exists', models.BooleanField(default=False, help_text='Indicates if the trade has been completed previously.')),
                ('estimated_trading_value', models.DecimalField(decimal_places=2, help_text='Estimated Market Price of Trade Item (will be displayed to potential traders)', max_digits=12)),
                ('message', models.CharField(blank=True, max_length=2000, null=True)),
                ('slug', models.SlugField(blank=True, editable=False, null=True, unique=True)),
                ('trade_status', models.IntegerField(choices=[(0, 'Pending'), (1, 'Accepted'), (2, 'Declined')], default=0)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('quantity', models.IntegerField(default=1)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Out of stock?')),
            ],
            options={
                'verbose_name': 'Trade Offer Response',
                'verbose_name_plural': 'Trade Offer Responses',
            },
        ),
        migrations.CreateModel(
            name='Robot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('is_bot', models.BooleanField(default=True)),
                ('image', models.FileField(upload_to='')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
        ),
        migrations.CreateModel(
            name='RuleBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Rule Background Image',
                'verbose_name_plural': 'Rule Background Images',
            },
        ),
        migrations.CreateModel(
            name='ServerBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Server Background Image',
                'verbose_name_plural': 'Server Background Images',
            },
        ),
        migrations.CreateModel(
            name='SettingsBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Settings Background Image',
                'verbose_name_plural': 'Settings Background Images',
            },
        ),
        migrations.CreateModel(
            name='ShareBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Share Background Image',
                'verbose_name_plural': 'Share Background Images',
            },
        ),
        migrations.CreateModel(
            name='ShowcaseBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Showcase Background Image',
                'verbose_name_plural': 'Showcase Background Images',
            },
        ),
        migrations.CreateModel(
            name='ShuffleType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Pack Opening', max_length=200)),
                ('type', models.CharField(choices=[('L', 'Luck'), ('S', 'Skill'), ('G', 'Grade')], default='L', max_length=1)),
                ('circumstance', models.CharField(choices=[('OP', 'One Player'), ('PVP', 'Player Versus Player'), ('MP', 'Multiple Players'), ('T', 'Tournament'), ('OE', 'Other Event'), ('L', 'Limited'), ('D', 'Drop')], default='OP', max_length=3)),
                ('game_mode', models.CharField(choices=[('STW', 'Spin The Wheel'), ('OB', 'Open Box'), ('OP', 'Open Pack'), ('SR', 'Spin Roulette')], default='STP', max_length=3)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Shuffle Type',
                'verbose_name_plural': 'Shuffle Types',
            },
        ),
        migrations.CreateModel(
            name='SignupBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Signup Background Image',
                'verbose_name_plural': 'SignupBackground Images',
            },
        ),
        migrations.CreateModel(
            name='StaffApplyBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Staff Application Background Image',
                'verbose_name_plural': 'Staff Application Background Images',
            },
        ),
        migrations.CreateModel(
            name='StaffBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Staff Background Image',
                'verbose_name_plural': 'Staff Background Images',
            },
        ),
        migrations.CreateModel(
            name='StaffRanksBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Staff Ranks Background Image',
                'verbose_name_plural': 'Staff Ranks Background Images',
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_on', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
            ],
            options={
                'verbose_name': 'Website',
                'db_table': 'state',
            },
        ),
        migrations.CreateModel(
            name='SupportBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Support Background Image',
                'verbose_name_plural': 'Support Background Images',
            },
        ),
        migrations.CreateModel(
            name='SupportChatBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Support Chat Background Image',
                'verbose_name_plural': 'Support Chat Background Images',
            },
        ),
        migrations.CreateModel(
            name='TagBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Tag Background Image',
                'verbose_name_plural': 'Tag Background Images',
            },
        ),
        migrations.CreateModel(
            name='TextBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Text')),
                ('page', models.TextField(verbose_name='Page Name')),
                ('url', models.URLField(blank=True, null=True, verbose_name='Page URL')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('text_color', models.CharField(blank=True, default='white', help_text='Color of the text (accepts color names, hex codes or RGBA values in format (R, G, B, A))', max_length=200, null=True, verbose_name='Text Color')),
                ('header_or_textfield', models.BooleanField(choices=[(1, 'Header'), (0, 'Body')], default=1, verbose_name='Header or Body Text')),
                ('section', models.IntegerField(default='1', help_text='Section Number of Text', verbose_name='Text Section')),
                ('exists', models.BooleanField(choices=[(1, 'Yes'), (0, 'No')], default=1, help_text='Is this section taken?', verbose_name='Section Taken')),
                ('hyperlink', models.TextField(blank=True, null=True, verbose_name='Hyperlink')),
                ('text_size', models.IntegerField(choices=[(6, 'H6'), (5, 'H5'), (4, 'H4'), (3, 'H3'), (2, 'H2'), (1, 'H1'), (0, 'p')], default=0, help_text='6->Body 3, 5->Body 2, 4->Body 1, 3-> Heading 3,2-> Heading 2, 1-> Heading 1,', verbose_name='Text Type')),
                ('font_size', models.IntegerField(blank=True, null=True, verbose_name='Font Size')),
                ('font_measurement', models.CharField(blank=True, choices=[('px', 'Pixels'), ('%', 'Percent'), ('vh', 'View Height'), ('em', 'em'), ('rem', 'Root em'), ('pt', 'Points'), ('pc', 'Picas')], max_length=3, null=True)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Text Base',
                'verbose_name_plural': 'Text Base',
            },
        ),
        migrations.CreateModel(
            name='TiersBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Tiers Background Image',
                'verbose_name_plural': 'Tiers Background Images',
            },
        ),
        migrations.CreateModel(
            name='Titled',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overtitle', models.TextField(verbose_name='Title')),
                ('page', models.TextField(blank=True, null=True, verbose_name='Page Name')),
                ('url', models.URLField(blank=True, null=True, verbose_name='Page URL')),
                ('position', models.IntegerField(default=1)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Page Title',
                'verbose_name_plural': 'Page Titles',
            },
        ),
        migrations.CreateModel(
            name='Trade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('slug', models.SlugField()),
                ('printed', models.BooleanField(default=False)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Out of stock?')),
                ('responding_trade_offers', models.ManyToManyField(blank=True, related_name='responding_trades', to='showcase.respondingtradeoffer')),
            ],
            options={
                'verbose_name': 'Trade',
                'verbose_name_plural': 'Trades',
            },
        ),
        migrations.CreateModel(
            name='TradeContract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commission', models.FloatField(default=10, help_text='(%)')),
                ('trading_contract', models.TextField()),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Trade Contract',
                'verbose_name_plural': 'Trade Contracts',
            },
        ),
        migrations.CreateModel(
            name='TradeItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('fees', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('category', models.CharField(choices=[('G', 'Gold'), ('P', 'Platinum'), ('E', 'Emerald'), ('D', 'Diamond')], max_length=2)),
                ('specialty', models.CharField(blank=True, choices=[('F', 'Featured'), ('P', 'Popular'), ('PR', 'Premium'), ('LE', 'Limited Edition')], max_length=2, null=True)),
                ('condition', models.CharField(choices=[('M', 'Mint'), ('NM', 'Near Mint'), ('MP', 'Moderately Played'), ('HP', 'Heavily Played'), ('D', 'Damaged')], default='M', max_length=2)),
                ('label', models.CharField(choices=[('N', 'New'), ('BS', 'Best Seller'), ('BV', 'Best Value')], default='N', max_length=1000)),
                ('slug', models.SlugField(blank=True, null=True)),
                ('status', models.IntegerField(choices=[(0, 'Draft'), (1, 'Publish')], default=1)),
                ('certified', models.BooleanField(default=False, help_text='If you are applying to become a partner in more than 1 category, talk to Trove.')),
                ('description', models.TextField()),
                ('value', models.IntegerField(blank=True, null=True)),
                ('image', models.ImageField(upload_to='images/')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('length_for_resize', models.PositiveIntegerField(blank=True, default=100, null=True, verbose_name='Resized Length')),
                ('width_for_resize', models.PositiveIntegerField(blank=True, default=100, null=True, verbose_name='Resized Width')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Out of stock?')),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.currency')),
                ('inventoryobject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='showcase.inventoryobject')),
                ('relateditems', models.ManyToManyField(blank=True, to='showcase.tradeitem', verbose_name='Related Items:')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Trade Item',
                'verbose_name_plural': 'Trade Items',
            },
        ),
        migrations.CreateModel(
            name='TradeOffer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Name of your trade offer.', max_length=100)),
                ('estimated_trading_value', models.DecimalField(decimal_places=2, help_text='Estimated Market Price of Trade Item (will be displayed to potential traders)', max_digits=12)),
                ('message', models.CharField(blank=True, max_length=2000, null=True)),
                ('trade_status', models.IntegerField(choices=[(0, 'Pending'), (1, 'Accepted'), (2, 'Declined')], default=0)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('trade_agreement', models.BooleanField(default=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('quantity', models.IntegerField(default=1)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Out of stock?')),
                ('trade_items', models.ManyToManyField(to='showcase.tradeitem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Trader', to=settings.AUTH_USER_MODEL)),
                ('user2', models.ForeignKey(blank=True, help_text='Optional', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Receiver', to=settings.AUTH_USER_MODEL, verbose_name='Recipient')),
            ],
            options={
                'verbose_name': 'Trade Offer',
                'verbose_name_plural': 'Trade Offers',
            },
        ),
        migrations.CreateModel(
            name='UserBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'User Background Image',
                'verbose_name_plural': 'Users Background Images',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_customer_id', models.CharField(blank=True, max_length=50, null=True)),
                ('one_click_purchasing', models.BooleanField(default=False)),
                ('currency_amount', models.IntegerField(default=0, verbose_name='Currency Amount')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('currency', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='showcase.currency')),
                ('level', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='showcase.level')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.CreateModel(
            name='VoteBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Vote Background Image',
                'verbose_name_plural': 'Vote Background Images',
            },
        ),
        migrations.CreateModel(
            name='WebsiteBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
            ],
            options={
                'verbose_name': 'Website Background Image',
                'verbose_name_plural': 'Website Background Images',
            },
        ),
        migrations.CreateModel(
            name='WhyBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
            ],
            options={
                'verbose_name': 'Why Background Image',
                'verbose_name_plural': 'Why Background Images',
            },
        ),
        migrations.CreateModel(
            name='Withdraw',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_of_cards', models.IntegerField(blank=True, null=True, verbose_name='Quantity')),
                ('shipping_state', models.CharField(choices=[('P', 'Processing'), ('S', 'Shipped'), ('D', 'Delivered'), ('R', 'Refunded'), ('C', 'Canceled'), ('D', 'Damaged In Transit'), ('O', 'On Hold')], default='P', max_length=1)),
                ('fees', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('slag', models.SlugField(blank=True, max_length=16, null=True, unique=True, verbose_name='Slug')),
                ('date_and_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='time and date')),
                ('condition', models.CharField(blank=True, choices=[('M', 'Mint'), ('NM', 'Near Mint'), ('MP', 'Moderately Played'), ('HP', 'Heavily Played'), ('D', 'Damaged')], default='M', max_length=2, null=True)),
                ('status', models.CharField(choices=[('P', 'Processing'), ('E', 'Earlier Than Expected'), ('O', 'On Time'), ('L', 'Late'), ('N', 'Not Applicable - Down'), ('N', 'Not Applicable - Intended')], default='P', max_length=1)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Is this withdraw active?')),
                ('cards', models.ManyToManyField(to='showcase.inventoryobject')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Withdrawal Card',
                'verbose_name_plural': 'Withdrawal Cards',
            },
        ),
        migrations.CreateModel(
            name='Advertising',
            fields=[
                ('advertisementbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='showcase.advertisementbase')),
            ],
            bases=('showcase.advertisementbase',),
        ),
        migrations.CreateModel(
            name='WithdrawClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_of_cards', models.IntegerField(blank=True, null=True)),
                ('shipping_state', models.CharField(choices=[('P', 'Processing'), ('S', 'Shipped'), ('D', 'Delivered'), ('R', 'Refunded'), ('C', 'Canceled'), ('D', 'Damaged In Transit'), ('O', 'On Hold')], default='S', max_length=1)),
                ('fees', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('open', models.BooleanField(default=True)),
                ('date_and_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='time and date')),
                ('status', models.CharField(choices=[('P', 'Processing'), ('S', 'Shipped'), ('D', 'Delivered'), ('R', 'Refunded'), ('C', 'Canceled'), ('D', 'Damaged In Transit'), ('O', 'On Hold')], default='P', max_length=1)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Is this withdraw active?')),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.currency')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('withdraw', models.ManyToManyField(to='showcase.withdraw')),
            ],
            options={
                'verbose_name': 'Withdrawal Class',
                'verbose_name_plural': 'Withdrawal Classes',
            },
        ),
        migrations.CreateModel(
            name='Wager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(verbose_name='Bet Amount')),
                ('outcome', models.CharField(blank=True, choices=[('W', 'Win'), ('L', 'Lose'), ('D', 'Draw'), ('B', 'BlackJack')], default=None, max_length=1, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='VoteQuery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('category', models.CharField(help_text='Type the category that you are voting on (server layout, event idea, administration position, etc).', max_length=100)),
                ('mfg_date', models.DateTimeField(auto_now_add=True, verbose_name='date')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Vote',
                'verbose_name_plural': 'Votes',
            },
        ),
        migrations.CreateModel(
            name='VoteOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=200)),
                ('vote_query', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='showcase.votequery')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(default='', max_length=100)),
                ('last_name', models.CharField(default='', max_length=100)),
                ('description', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('address', models.CharField(blank=True, max_length=250, null=True)),
                ('address2', models.CharField(blank=True, max_length=250, null=True)),
                ('city', models.CharField(default='', max_length=100)),
                ('state', models.CharField(default='', max_length=100)),
                ('country', django_countries.fields.CountryField(default='United States of America', max_length=2)),
                ('zip_code', models.CharField(default='00000', max_length=5)),
                ('phone_number', models.CharField(default='000-000-0000', max_length=12)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_image')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ship_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Shipping Profile',
                'verbose_name_plural': 'Shipping Profiles',
                'unique_together': {('user', 'id')},
            },
        ),
        migrations.CreateModel(
            name='UserNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('notification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_notifications', to='showcase.notification')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Notification',
            },
        ),
        migrations.CreateModel(
            name='UploadACard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('serial_number', models.CharField(blank=True, max_length=200, null=True)),
                ('image', models.ImageField(max_length=200, upload_to='', verbose_name='Card')),
                ('public', models.BooleanField(default=False, verbose_name='Submit To Public')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Upload A Card',
                'verbose_name_plural': 'Upload Cards',
            },
        ),
        migrations.CreateModel(
            name='UpdateProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('profile_number', models.PositiveIntegerField(default=0, editable=False)),
                ('date_and_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='time and date')),
                ('image', models.ImageField(help_text='Attach an image for your profile (scales to your picture`s dimensions.)', upload_to='')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile Post',
                'verbose_name_plural': 'User Profile Posts',
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('date_and_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='time and date')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.currency')),
                ('inventory_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.inventoryobject')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
            },
        ),
        migrations.CreateModel(
            name='TradeShippingLabel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(default='', max_length=100)),
                ('last_name', models.CharField(default='', max_length=100)),
                ('description', models.CharField(default='', max_length=100)),
                ('address', models.CharField(blank=True, max_length=250, null=True)),
                ('address2', models.CharField(blank=True, help_text='Optional', max_length=250, null=True)),
                ('city', models.CharField(default='', max_length=100)),
                ('state', models.CharField(default='', max_length=100)),
                ('zip_code', models.CharField(default=0, max_length=5)),
                ('phone_number', models.CharField(default='000-000-0000', max_length=12)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_image')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('shipping_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.userprofile2')),
                ('trade_offer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.tradeoffer')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Trade Shipping Label',
                'verbose_name_plural': 'Trade Shipping Labels',
            },
        ),
        migrations.CreateModel(
            name='TradeConfirmation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trade_confirmation', models.BooleanField(default=False, verbose_name='I confirm that I agree to these terms & conditions for the trade.')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('trade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tradeconfirm', to='showcase.trade')),
                ('trader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='traderconfirm', to=settings.AUTH_USER_MODEL)),
                ('trading_contract', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contract', to='showcase.trade')),
            ],
            options={
                'verbose_name': 'Trade Confirmation',
                'verbose_name_plural': 'Trade Confirmations',
            },
        ),
        migrations.CreateModel(
            name='Trade_In_Cards',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card_name', models.CharField(max_length=200)),
                ('card_image', models.ImageField(upload_to='')),
                ('card_condition', models.CharField(max_length=2, verbose_name=(('M', 'Mint'), ('NM', 'Near Mint'), ('MP', 'Moderately Played'), ('HP', 'Heavily Played'), ('D', 'Damaged')))),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Trade-In Card',
                'verbose_name_plural': 'Trade-In Cards',
            },
        ),
        migrations.AddField(
            model_name='trade',
            name='trade_offers',
            field=models.ManyToManyField(to='showcase.tradeoffer'),
        ),
        migrations.AddField(
            model_name='trade',
            name='trade_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dealer_trades', to='showcase.userprofile2', verbose_name='Dealer'),
        ),
        migrations.AddField(
            model_name='trade',
            name='trade_user2',
            field=models.ForeignKey(blank=True, help_text='Optional', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recipient_trades', to='showcase.userprofile2', verbose_name='Recipient'),
        ),
        migrations.AddField(
            model_name='trade',
            name='users',
            field=models.ManyToManyField(related_name='traders', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='TopHits',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color', models.CharField(blank=True, choices=[('Gra', 'Gray'), ('Gre', 'Green'), ('Y', 'Yellow'), ('O', 'Orange'), ('R', 'Red'), ('B', 'Black'), ('G', 'Gold')], max_length=3, null=True)),
                ('file', models.FileField(null=True, upload_to='', verbose_name='File')),
                ('mfg_date', models.DateTimeField(auto_now_add=True, verbose_name='date')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('choice', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.choice')),
                ('game', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.game')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Top Hit',
            },
        ),
        migrations.CreateModel(
            name='SupportMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=1000000)),
                ('date', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('user', models.CharField(max_length=1000000)),
                ('room', models.CharField(max_length=1000000)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='profile_image')),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('signed_in_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='support_messages', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Support Message',
                'verbose_name_plural': 'Support Messages',
            },
        ),
        migrations.CreateModel(
            name='SupportLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=1000000)),
                ('date', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('room', models.CharField(max_length=1000000)),
                ('message_number', models.PositiveIntegerField(default=0, editable=False)),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('signed_in_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='supportlinemessages', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Administration Thread Message',
                'verbose_name_plural': 'Administration Thread Messages',
            },
        ),
        migrations.CreateModel(
            name='SupportInterface',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000, null=True)),
                ('date', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='supportinterfaceroom', to=settings.AUTH_USER_MODEL, verbose_name='Room Creator')),
            ],
            options={
                'verbose_name': 'Administration Chat Thread',
                'verbose_name_plural': 'Administration Chat Thread',
            },
        ),
        migrations.CreateModel(
            name='SupportChat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('signed_in_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Support Chat',
                'verbose_name_plural': 'Support Chat',
            },
        ),
        migrations.CreateModel(
            name='Support',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('category', models.CharField(max_length=200)),
                ('issue', models.TextField()),
                ('Additional_comments', models.TextField(verbose_name='additional comments')),
                ('image', models.ImageField(blank=True, help_text='Please attach a screenshot of your issue.', null=True, upload_to='')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Customer Support',
                'verbose_name_plural': 'Customer Support',
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mfg_date', models.DateTimeField(auto_now_add=True, verbose_name='date')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('membership_tier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.membership')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Subscription',
                'verbose_name_plural': 'Subscriptions',
            },
        ),
        migrations.CreateModel(
            name='StoreViewType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[('stream', 'Streamlined View'), ('detail', 'Detailed View')], default='stream', max_length=6, null=True)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Store View Type',
                'verbose_name_plural': 'Store View Types',
            },
        ),
        migrations.CreateModel(
            name='StaffProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Your name goes here. If you wish to stay anonymous, put "Anonymous".', max_length=100)),
                ('description', models.TextField(help_text='Write whatever you want on your profile here (within regulations).')),
                ('staff_feats', models.TextField(help_text='Let us know of your transcendental feats of making PokeTrove a better place.', verbose_name='Staff feats')),
                ('date_and_time', models.DateTimeField(null=True, verbose_name='Time and date of Staff Profile Creation')),
                ('image', models.ImageField(help_text='Please provide a cover image for your profile.', upload_to='')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('role_position', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.group', verbose_name='Position')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Staff Profile',
                'verbose_name_plural': 'Staff Profiles',
            },
        ),
        migrations.CreateModel(
            name='StaffApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Your full name goes here.', max_length=100)),
                ('strikes_check', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=False, verbose_name='I have no strikes on my account currently')),
                ('overall_time_check', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=False, verbose_name='I have been a user for at least 3 months.')),
                ('previous_role_time_check', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], verbose_name='I already fulfill a role and wish to promote.')),
                ('role', models.TextField(help_text='What role are you applying for?', verbose_name='Roles')),
                ('resume', models.FileField(help_text='Your Resume', upload_to='', verbose_name='Resume')),
                ('why', models.TextField(help_text='Tell us why you want to be an Accomfort Staff Member. Be descriptive.', verbose_name='Why do you want to apply for staff?')),
                ('how_better', models.TextField(help_text='Tell us what you will do to make Accomfort better as a staff member.', verbose_name='How do you think you can make PokeTrove better?')),
                ('read_requirements', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=False, verbose_name='I confirm that I have read all the staff requirements and meet all of them.')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Staff Application',
                'verbose_name_plural': 'Staff Applications',
            },
        ),
        migrations.CreateModel(
            name='SpinPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quick_spin', models.BooleanField(default=False)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('game', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.game')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spinpreferer', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Spin Preference',
                'verbose_name_plural': 'Spin Preferences',
            },
        ),
        migrations.CreateModel(
            name='SpinnerChoiceRenders',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='nonce', unique=True)),
                ('value', models.IntegerField(blank=True, null=True)),
                ('ratio', models.IntegerField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('color', models.CharField(blank=True, choices=[('Gra', 'Gray'), ('Gre', 'Green'), ('Y', 'Yellow'), ('O', 'Orange'), ('R', 'Red'), ('B', 'Black'), ('G', 'Gold')], max_length=3, null=True)),
                ('nonce', models.DecimalField(decimal_places=0, max_digits=6)),
                ('lower_nonce', models.DecimalField(blank=True, decimal_places=0, help_text='Lower bound nonce of Choice', max_digits=7, null=True, validators=[django.core.validators.MaxValueValidator(1000000), django.core.validators.MinValueValidator(0)])),
                ('upper_nonce', models.DecimalField(blank=True, decimal_places=0, help_text='Upper bound nonce of Choice', max_digits=7, null=True, validators=[django.core.validators.MaxValueValidator(1000000), django.core.validators.MinValueValidator(0)])),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('choice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.choice')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.game')),
                ('game_creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='game_creator', to=settings.AUTH_USER_MODEL)),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.gamehub')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='game_player', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SocialMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('social', models.TextField(blank=True, help_text="Follow format 'logo-{platform name}'", null=True, verbose_name='Social Media Platform')),
                ('icon', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Social Media Logo')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Width of the image (in percent relative).', null=True, verbose_name='image width')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Length of the image (in percent relative).', null=True, verbose_name='image length')),
                ('width_for_resize', models.PositiveIntegerField(default=100, verbose_name='Resize Width')),
                ('height_for_resize', models.PositiveIntegerField(default=100, verbose_name='Resize Height')),
                ('image_position', models.IntegerField(blank=True, help_text='Positioning of the image.', null=True, verbose_name='Position')),
                ('alternate', models.TextField(blank=True, null=True, verbose_name='Alternate Text')),
                ('page', models.TextField(verbose_name='Page Name')),
                ('hyperlink', models.URLField(verbose_name='Hyperlink')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('staff_profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.staffprofile')),
            ],
            options={
                'verbose_name': 'Social Media',
                'verbose_name_plural': 'Social Media',
            },
        ),
        migrations.CreateModel(
            name='Shuffler',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice_text', models.CharField(max_length=200)),
                ('file', models.FileField(null=True, upload_to='', verbose_name='File')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('category', models.CharField(help_text='Type the category of product getting shuffled.', max_length=100)),
                ('heat', models.CharField(blank=True, choices=[('M', 'Mild'), ('S', 'Spicy'), ('F', 'Fiery'), ('W', 'Wild'), ('E', 'Explosive')], max_length=2, null=True)),
                ('mfg_date', models.DateTimeField(auto_now_add=True, verbose_name='date')),
                ('demonstration', models.CharField(blank=True, choices=[('P', 'Practice'), ('R', 'Real')], max_length=2, null=True)),
                ('total_number_of_choice', models.IntegerField()),
                ('cost', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=10, null=True)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('choices', models.ManyToManyField(blank=True, to='showcase.choice')),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.currency')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.pollquestion')),
                ('shuffletype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.shuffletype', verbose_name='Shuffle Type')),
            ],
            options={
                'verbose_name': 'Shuffle Choice',
                'verbose_name_plural': 'Shuffle Choices',
            },
        ),
        migrations.CreateModel(
            name='SettingsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(help_text='Your username', max_length=200)),
                ('password', models.CharField(help_text='Your password', max_length=200)),
                ('email', models.EmailField(blank=True, help_text='Your password', max_length=200, null=True)),
                ('notifications_status', models.CharField(choices=[('ON', 'Online'), ('DND', 'Do Not Disturb'), ('OFF', 'Offline')], default='OFF', max_length=3)),
                ('coupons', models.BooleanField(blank=True, choices=[(True, 'Yes'), (False, 'No')], default=False, null=True, verbose_name='Send me coupons')),
                ('news', models.BooleanField(blank=True, choices=[(True, 'Yes'), (False, 'No')], default=False, null=True, verbose_name='Keep me in the loop')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Setting',
                'verbose_name_plural': 'Settings',
            },
        ),
        migrations.CreateModel(
            name='SellerApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('age', models.DateField(verbose_name='Date of birth')),
                ('identification', models.FileField(help_text="Please provide a valid government-issued ID (Passport, Driver's License, Birth Certificate, etc)", upload_to='')),
                ('email', models.EmailField(help_text='Please input your email', max_length=254, unique=True)),
                ('email_verified', models.BooleanField(default=False)),
                ('accepted', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Seller Application',
                'verbose_name_plural': 'Seller Applications',
            },
        ),
        migrations.CreateModel(
            name='SecretRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, validators=[django.core.validators.MinLengthValidator(24)])),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Secret Room',
                'verbose_name_plural': 'Secret Room',
            },
        ),
        migrations.CreateModel(
            name='SearchResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('url', models.URLField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('time', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('public', models.BooleanField(default=False, verbose_name='Make Public?')),
                ('logo', models.FileField(blank=True, null=True, upload_to='', verbose_name='Logo')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('members', models.ManyToManyField(blank=True, related_name='members', to=settings.AUTH_USER_MODEL)),
                ('signed_in_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='room', to=settings.AUTH_USER_MODEL, verbose_name='Room Creator')),
            ],
        ),
        migrations.AddField(
            model_name='respondingtradeoffer',
            name='offered_trade_items',
            field=models.ManyToManyField(to='showcase.tradeitem'),
        ),
        migrations.AddField(
            model_name='respondingtradeoffer',
            name='trade_shipping_label',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.tradeshippinglabel'),
        ),
        migrations.AddField(
            model_name='respondingtradeoffer',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Dealer', to=settings.AUTH_USER_MODEL, verbose_name='Dealer'),
        ),
        migrations.AddField(
            model_name='respondingtradeoffer',
            name='user2',
            field=models.ForeignKey(blank=True, help_text='Optional', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Recipient', to=settings.AUTH_USER_MODEL, verbose_name='Recipient'),
        ),
        migrations.AddField(
            model_name='respondingtradeoffer',
            name='wanted_trade_items',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.tradeoffer'),
        ),
        migrations.CreateModel(
            name='ReportIssue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Your name and tag go here. If you wish to stay anonymous, put "Anonymous".', max_length=100)),
                ('category', models.CharField(help_text='Please let us know what type of issue this is.', max_length=200)),
                ('issue', models.TextField(help_text='Describe the issue in detail. We will try to get to it as soon as possible.')),
                ('Additional_comments', models.TextField(help_text='Put any additional comments you may have here.', verbose_name='additional comments')),
                ('image', models.ImageField(help_text='Please put a screenshot of the issue.', upload_to='')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('anonymous', models.BooleanField(default=False, help_text='Report issue anonymously?')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Report Issue',
                'verbose_name_plural': 'Report Issues',
            },
        ),
        migrations.CreateModel(
            name='Refund',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField()),
                ('accepted', models.BooleanField(default=False)),
                ('email', models.EmailField(max_length=254)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Is this an active refund?')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.order')),
            ],
        ),
        migrations.CreateModel(
            name='QuickItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100, null=True)),
                ('price', models.FloatField(blank=True, null=True)),
                ('discount_price', models.FloatField(blank=True, null=True)),
                ('image', models.ImageField(upload_to='images/')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('quantity', models.IntegerField(default=1)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Out of stock?')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='showcase.item')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Quick Item',
                'verbose_name_plural': 'Quick Items',
            },
        ),
        migrations.CreateModel(
            name='Questionaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('form_name', models.TextField(verbose_name='Form Name')),
                ('form_type', models.CharField(choices=[('option1', 'Multiple Choice'), ('option2', 'Short Answer'), ('option3', 'True or False'), ('option4', 'Free Response'), ('option5', 'Image Field'), ('option6', 'Integer Field'), ('option7', 'Decimal Field'), ('option8', 'Other')], max_length=10)),
                ('text', models.TextField(verbose_name='Question')),
                ('image', models.TextField(blank=True, null=True, verbose_name='Image')),
                ('answer_choices', models.CharField(blank=True, max_length=255, null=True)),
                ('correct_answer_multiple_choice', models.CharField(blank=True, max_length=255, null=True)),
                ('correct_answer_short_answer', models.CharField(blank=True, max_length=255, null=True)),
                ('correct_answer_true_false', models.BooleanField(blank=True, null=True)),
                ('correct_answer_free_response', models.TextField(blank=True, null=True)),
                ('correct_answer_image_field', models.ImageField(blank=True, null=True, upload_to='correct_answers/')),
                ('correct_answer_integer_field', models.IntegerField(blank=True, null=True)),
                ('correct_answer_decimal_field', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('correct_answer_infinite_decimal_field', models.FloatField(blank=True, null=True)),
                ('correct_answer_other', models.CharField(blank=True, max_length=255, null=True)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Is this an active order?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Question Form Base',
            },
        ),
        migrations.CreateModel(
            name='PunishmentAppeal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Your name and tag go here.', max_length=100)),
                ('Rule_broken', models.CharField(help_text='Tell us the numbers of the rule(s) you broke. Refer to our rules page to see the rules and their corresponding numbers.', max_length=200, verbose_name='rule broken')),
                ('Why_I_should_have_my_punishment_revoked', models.TextField(help_text='Tell us why we should revoke your punishment, and what you can do to fix your mistake. If you think your punishment is a mistake, tell us why.', verbose_name='Why I should have my punishment revoked')),
                ('Additional_comments', models.TextField(help_text='Put any additional evidence or comments you may have here.', verbose_name='additional comments')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Punishment Appeal',
                'verbose_name_plural': 'Punishment Appeals',
            },
        ),
        migrations.CreateModel(
            name='ProfileDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('shipping_address', models.CharField(blank=True, max_length=250, null=True)),
                ('billing_address', models.CharField(blank=True, max_length=250, null=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='profile_image', verbose_name='Profile picture')),
                ('alternate', models.TextField(blank=True, null=True, verbose_name='Alternate text')),
                ('about_me', models.TextField(blank=True, null=True)),
                ('currency_amount', models.IntegerField(default=0)),
                ('total_currency_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_currency_spent', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('rubies_spent', models.IntegerField(blank=True, default=0, null=True)),
                ('green_cards_hit', models.IntegerField(blank=True, null=True)),
                ('yellow_cards_hit', models.IntegerField(blank=True, null=True)),
                ('orange_cards_hit', models.IntegerField(blank=True, null=True)),
                ('red_cards_hit', models.IntegerField(blank=True, null=True)),
                ('black_cards_hit', models.IntegerField(blank=True, null=True)),
                ('gold_cards_hit', models.IntegerField(blank=True, null=True)),
                ('red_gold_cards_hit', models.IntegerField(blank=True, null=True)),
                ('times_subtract_called', models.IntegerField(default=0)),
                ('seller', models.BooleanField(default=False, null=True)),
                ('trader', models.BooleanField(default=False, null=True)),
                ('partner', models.BooleanField(default=False, null=True)),
                ('position', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Position for sorting', unique=True)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.currency')),
                ('level', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='showcase.level')),
                ('membership', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.membership')),
                ('monstrosity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='monster', to='showcase.monstrosity')),
                ('other_currencies_amount', models.ManyToManyField(related_name='profile_currencies', through='showcase.ProfileCurrency', to='showcase.currency')),
                ('subscription', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.subscription')),
                ('unlocked_daily_chests', models.ManyToManyField(blank=True, to='showcase.game')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Account Profile',
                'verbose_name_plural': 'Account Profiles',
            },
        ),
        migrations.AddField(
            model_name='profilecurrency',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.profiledetails'),
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('about_me', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='profile_image')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PrizePool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prize_name', models.CharField(max_length=500, verbose_name='Prize Name')),
                ('image', models.FileField(upload_to='images/', verbose_name='Prize Image')),
                ('number', models.IntegerField(default=1, verbose_name='Quantity of Card')),
                ('price', models.IntegerField(default=1)),
                ('mfg_date', models.DateTimeField(auto_now_add=True, verbose_name='date')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.currency')),
            ],
            options={
                'verbose_name': 'Inventory',
                'verbose_name_plural': 'Inventory',
            },
        ),
        migrations.CreateModel(
            name='PostLikes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.idea')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Post Like',
                'verbose_name_plural': 'Post Likes',
            },
        ),
        migrations.CreateModel(
            name='PlayerVersusPlayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Pack Opening', max_length=200)),
                ('privacy', models.CharField(choices=[('PUB', 'Public'), ('PRI', 'Private')], max_length=3)),
                ('locked_in', models.BooleanField(default=0, help_text='0->Open, 1->Locked In', verbose_name='Open or Locked In?')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Player Versus Player',
                'verbose_name_plural': 'Player Versus Players',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_charge_id', models.CharField(max_length=50)),
                ('amount', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PartnerApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Your first and last name.', max_length=100)),
                ('multi_category', models.BooleanField(default=False, help_text='If you are applying to become a partner in more than 1 category, talk to Trove.')),
                ('description', models.TextField(help_text='Describe yourself. What would entice buyers to play your games?')),
                ('resume', models.FileField(help_text='Upload any accompying information to help streamline the selection process.', upload_to='')),
                ('requirement_check', models.BooleanField(default=False, help_text='I have read and meet or exceed all requirements.')),
                ('policy_check', models.BooleanField(default=False, help_text='I have read and understand the policies regarding partnership with PokeTrove. I also understand I may be liable if I break these policies..')),
                ('accepted', models.BooleanField(default=False)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('category', models.ForeignKey(help_text='What category are you applying to partner in? (if more than one, pick your main category and select the box below.)', on_delete=django.db.models.deletion.CASCADE, to='showcase.cardcategory')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('voucher', models.ForeignKey(blank=True, help_text='This is optional but can help streamline the selection process.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='voucher', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Partner Application',
                'verbose_name_plural': 'Partner Applications',
            },
        ),
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Your username goes here.', max_length=100)),
                ('category', models.CharField(help_text='Pick a category you feel your server represents (gaming, community, etc).', max_length=100)),
                ('description', models.TextField(help_text='Describe your server. Tell potential members why they should join.')),
                ('server_invite', models.URLField(help_text='Post your server invite link here.')),
                ('anonymous', models.BooleanField(default=False, help_text='Remain anonymous? (not recommended)')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Outcome',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quick_spin', models.BooleanField(default=False)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='nonce', unique=True)),
                ('value', models.IntegerField(blank=True, null=True)),
                ('ratio', models.IntegerField(blank=True, null=True)),
                ('file', models.FileField(blank=True, null=True, upload_to='images/')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('color', models.CharField(blank=True, choices=[('Gra', 'Gray'), ('Gre', 'Green'), ('Y', 'Yellow'), ('O', 'Orange'), ('R', 'Red'), ('B', 'Black'), ('G', 'Gold')], max_length=3, null=True)),
                ('green_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('yellow_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('orange_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('red_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('black_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('gold_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('redgold_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('nonce', models.DecimalField(decimal_places=0, max_digits=7)),
                ('date_and_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='date and time')),
                ('demonstration', models.BooleanField(default=False)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('choice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.choice')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.game')),
                ('game_creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='creator', to=settings.AUTH_USER_MODEL)),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.gamehub')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='player', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OrderItemField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordered', models.BooleanField(default=False)),
                ('slug', models.SlugField(blank=True, help_text='Leave blank to use corresponding product slug.', max_length=200, null=True)),
                ('image', models.ImageField(upload_to='')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('quantity', models.IntegerField(default=1)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.item')),
                ('orderitem_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.orderitem', verbose_name='Order item id')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Order Item Fields',
            },
        ),
        migrations.AddField(
            model_name='order',
            name='items',
            field=models.ManyToManyField(to='showcase.orderitem'),
        ),
        migrations.AddField(
            model_name='order',
            name='payment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='showcase.payment'),
        ),
        migrations.AddField(
            model_name='order',
            name='profile',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.profiledetails'),
        ),
        migrations.AddField(
            model_name='order',
            name='shipping_address',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='shipping_address', to='showcase.address'),
        ),
        migrations.AddField(
            model_name='order',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='OfficialShipping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street_address', models.CharField(max_length=100)),
                ('apartment_address', models.CharField(blank=True, max_length=100, null=True)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('zip', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('P', 'Processing'), ('S', 'Shipped'), ('D', 'Delivered'), ('R', 'Refunded'), ('C', 'Canceled'), ('D', 'Damaged In Transit'), ('O', 'On Hold')], default='P', max_length=1)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Is this actively shipping?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Official Shipping',
            },
        ),
        migrations.CreateModel(
            name='NewsFeed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Your name and tag go here. If you wish to stay anonymous, put "Anonymous".', max_length=100)),
                ('title', models.TextField(help_text='Write the news headline here.', verbose_name='News Headline')),
                ('slug', models.SlugField(blank=True, max_length=200, null=True, unique=True)),
                ('category', models.CharField(help_text='Please let us know what form of news this is.', max_length=200)),
                ('description', models.TextField(help_text='Write the news here.')),
                ('image', models.ImageField(help_text='Please provide a cover image for the news.', upload_to='')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('date_and_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='time and date')),
                ('position', models.IntegerField(default=1, verbose_name='Image Position')),
                ('anonymous', models.BooleanField(default=False, help_text='Remain anonymous? (not recommended)')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'News Feed',
                'verbose_name_plural': 'News Feed',
            },
        ),
        migrations.AddField(
            model_name='monstrosity',
            name='monstrositysprite',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.monstrositysprite', verbose_name='Monstrosity Sprite'),
        ),
        migrations.AddField(
            model_name='monstrosity',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=1000000)),
                ('date', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('user', models.CharField(max_length=1000000, verbose_name='Username')),
                ('room', models.CharField(max_length=1000000)),
                ('message_number', models.PositiveIntegerField(default=0, editable=False)),
                ('file', models.FileField(blank=True, null=True, upload_to='images/')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('signed_in_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='messages', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='MemeTextField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(null=True)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('meme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='text_fields', to='showcase.meme')),
            ],
            options={
                'verbose_name': 'Meme Text Field',
                'verbose_name_plural': 'Meme Texts Fields',
            },
        ),
        migrations.CreateModel(
            name='LotteryTickets',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Daily Lotto', max_length=200)),
                ('flavor_text', models.CharField(blank=True, max_length=200, null=True)),
                ('file', models.FileField(null=True, upload_to='', verbose_name='Sprite')),
                ('lottery_number', models.CharField(default=showcase.models.create_unique_lottery_number, max_length=10, unique=True)),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('mfg_date', models.DateTimeField(auto_now_add=True, verbose_name='date')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('lottery', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.lottery')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Lottery Ticket',
                'verbose_name_plural': 'Lottery Tickets',
            },
        ),
        migrations.AddField(
            model_name='item',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.itemfilter'),
        ),
        migrations.AddField(
            model_name='item',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='InviteCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('permalink', models.BooleanField(default=False)),
                ('expire_time', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.room')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Invite Code',
                'verbose_name_plural': 'Invite Codes',
            },
        ),
        migrations.CreateModel(
            name='InventoryTradeOffer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('final_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('initiator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='initiated_trades', to=settings.AUTH_USER_MODEL)),
                ('offered_items', models.ManyToManyField(related_name='offered_in_trades', to='showcase.tradeitem')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_trades', to=settings.AUTH_USER_MODEL)),
                ('requested_items', models.ManyToManyField(related_name='requested_in_trades', to='showcase.tradeitem')),
            ],
            options={
                'verbose_name': 'Inventory Trade Offer',
            },
        ),
        migrations.CreateModel(
            name='ImageCarousel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('carouseltitle', models.CharField(blank=True, help_text='Title of the image.', max_length=100, null=True, verbose_name='title')),
                ('carouselcaption', models.TextField(help_text='Caption for the image.', verbose_name='caption')),
                ('carouselimage', models.ImageField(help_text='Upload an image for the carousel.)', upload_to='images/', verbose_name='image')),
                ('carouselimage_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the image (use for original ratio).', null=True, verbose_name='image length')),
                ('carouselimage_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the image (use for original ratio).', null=True, verbose_name='image width')),
                ('length_for_resize', models.PositiveIntegerField(default=100, verbose_name='Resized Length')),
                ('width_for_resize', models.PositiveIntegerField(default=100, verbose_name='Resized Width')),
                ('specialty', models.CharField(blank=True, choices=[('F', 'Featured'), ('P', 'Popular'), ('PR', 'Premium'), ('LE', 'Limited Edition')], max_length=2, null=True)),
                ('carouselnumber', models.IntegerField(help_text='What carousel number is this?.', verbose_name='Carousel number')),
                ('carouselposition', models.IntegerField(blank=True, help_text='Positioning of the image within the carousel.', null=True, verbose_name='position')),
                ('carouseltotal', models.IntegerField(default=9, help_text='Total number of images within the carousel.', verbose_name='total images')),
                ('carouselpage', models.TextField(verbose_name='Page Name')),
                ('hyperlink', models.TextField(verbose_name='Hyperlink')),
                ('alternate', models.TextField(blank=True, null=True, verbose_name='Alternate Text')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('associated_product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='showcase.item', verbose_name='Associated Product')),
            ],
            options={
                'verbose_name': 'Image Carousel Post',
                'verbose_name_plural': 'Image Carousel Posts',
            },
        ),
        migrations.CreateModel(
            name='ImageBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='title.', max_length=100, null=True, verbose_name='title')),
                ('image', models.ImageField(blank=True, height_field='image_length', help_text='Image of the advertisement.', null=True, upload_to='images/', width_field='image_width')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Width of the image (in percent relative).', null=True, verbose_name='image width')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Length of the image (in percent relative).', null=True, verbose_name='image length')),
                ('image_ratio', models.FloatField(blank=True, default=1.0, help_text='Length to Width Ratio of the Image (Length/Width).', null=True, verbose_name='image ratio')),
                ('file', models.FileField(blank=True, null=True, upload_to='images/', verbose_name='Non-image File')),
                ('image_measurement', models.CharField(blank=True, choices=[('px', 'Pixels'), ('%', 'Percent'), ('vh', 'View Height'), ('em', 'em'), ('rem', 'Root em'), ('pt', 'Points'), ('pc', 'Picas')], max_length=3, null=True)),
                ('width_for_resize', models.PositiveIntegerField(default=100, verbose_name='Resize Width')),
                ('height_for_resize', models.PositiveIntegerField(default=100, verbose_name='Resize Height')),
                ('image_position', models.IntegerField(blank=True, help_text='Positioning of the image.', null=True, verbose_name='Position')),
                ('alternate', models.TextField(blank=True, null=True, verbose_name='Alternate Text')),
                ('page', models.TextField(verbose_name='Page Name')),
                ('xposition', models.IntegerField(default='0', help_text='x-position.', verbose_name='x-position')),
                ('yposition', models.IntegerField(default='0', help_text='x-position.', verbose_name='y-position')),
                ('relevance', models.TextField(help_text='Relevance of image')),
                ('type', models.CharField(help_text='Type of image.', max_length=200)),
                ('hyperlink', models.TextField(blank=True, null=True, verbose_name='Hyperlink')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('correlating_product', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.item')),
            ],
            options={
                'verbose_name': 'Image Base',
                'verbose_name_plural': 'Image Base',
            },
        ),
        migrations.CreateModel(
            name='Hits',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.choice')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Hit',
                'verbose_name_plural': 'Hits',
            },
        ),
        migrations.CreateModel(
            name='GeneralMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=1000000)),
                ('date', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('user', models.CharField(max_length=1000000, verbose_name='Username')),
                ('file', models.FileField(blank=True, null=True, upload_to='images/')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('message_number', models.PositiveIntegerField(default=0, editable=False)),
                ('cutoff', models.IntegerField(default=0)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('signed_in_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='generalmessages', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'General Message',
                'verbose_name_plural': 'General Messages',
            },
        ),
        migrations.CreateModel(
            name='GameHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='images/')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('plays', models.IntegerField(blank=True, help_text='Number of plays', null=True)),
                ('value', models.IntegerField(blank=True, help_text='Value of item in Rubicoins.', null=True, verbose_name='Value (Rubicoins)')),
                ('number', models.IntegerField(blank=True, default=1, help_text='Position ordered by value (from highest to lowest)', null=True)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('choice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.choice')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gamecreator', to=settings.AUTH_USER_MODEL)),
                ('currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.currency')),
                ('game', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='games', to='showcase.game')),
                ('players', models.ManyToManyField(related_name='gameplayers', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='game',
            name='items',
            field=models.ManyToManyField(blank=True, related_name='official_items', to='showcase.prizepool'),
        ),
        migrations.AddField(
            model_name='game',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.gamehub'),
        ),
        migrations.AddField(
            model_name='game',
            name='unlocking_level',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.level'),
        ),
        migrations.AddField(
            model_name='game',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='FriendRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(choices=[(0, 'Pending'), (1, 'Accepted'), (2, 'Declined')], default=0)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_requests', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Friend Request',
                'verbose_name_plural': 'Friend Requests',
            },
        ),
        migrations.CreateModel(
            name='Friend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('friend_username', models.CharField(blank=True, max_length=500, null=True)),
                ('last_messaged', models.DateTimeField(blank=True, null=True)),
                ('currently_active', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('online', models.BooleanField(default=False)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('friend', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friends', to=settings.AUTH_USER_MODEL)),
                ('latest_messages', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.message')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('feedbackpage', models.TextField(blank=True, null=True, verbose_name='Page Name')),
                ('slug', models.SlugField(blank=True, help_text='Leave blank to use corresponding product slug.', max_length=200, null=True)),
                ('star_rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Star Rating')),
                ('showcase', models.IntegerField(blank=True, choices=[(1, 'Yes'), (0, 'No')], default=0, help_text='1->Yes, 0->No', null=True, verbose_name='Showcase on Cover Page?')),
                ('image', models.ImageField(blank=True, help_text='Please upload any product images', null=True, upload_to='images/', verbose_name='Images')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the image (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the image (use for original ratio).', null=True, verbose_name='image width')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.item')),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='showcase.orderitem')),
                ('username', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Experience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(blank=True, default=0, null=True)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('level', models.ManyToManyField(blank=True, related_name='current_level', to='showcase.level')),
                ('profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.profiledetails')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Experience',
                'verbose_name_plural': 'Experiences',
            },
        ),
        migrations.CreateModel(
            name='ExchangePrize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('value', models.IntegerField(blank=True, null=True)),
                ('condition', models.CharField(choices=[('M', 'Mint'), ('NM', 'Near Mint'), ('MP', 'Moderately Played'), ('HP', 'Heavily Played'), ('D', 'Damaged')], default='M', max_length=2)),
                ('image', models.ImageField(blank=True, null=True, upload_to='')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.currency')),
                ('prize', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.choice')),
            ],
            options={
                'verbose_name': 'Exchange Prize',
                'verbose_name_plural': 'Exchange Prizes',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Event name goes here.', max_length=100)),
                ('category', models.CharField(help_text='Please let us know what type of event this is (tournament, stage night, etc).', max_length=200)),
                ('numeric_quantifier', models.FloatField()),
                ('qualitative_qualifier', models.CharField(max_length=500)),
                ('description', models.TextField(help_text='Give a brief description of the event.')),
                ('date', models.DateField(help_text='Event date (day, date, and month)', null=True)),
                ('time', models.TimeField(help_text='Event time (hour/minute)', null=True)),
                ('date_and_time', models.DateTimeField(null=True, verbose_name='Time and date of Event Creation')),
                ('section', models.IntegerField(blank=True, null=True, verbose_name='Page Section')),
                ('page', models.TextField(verbose_name='Page Name')),
                ('slug', models.SlugField()),
                ('anonymous', models.BooleanField(default=False, help_text='Remain anonymous? (not recommended)')),
                ('image', models.ImageField(help_text='Please provide a cover image for the event.', upload_to='images/')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EndowmentCurrency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.currency')),
                ('endowment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='endowment', to='showcase.endowment')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sender', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Endowment',
                'verbose_name_plural': 'Endowments',
            },
        ),
        migrations.AddField(
            model_name='endowment',
            name='experience',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.experience'),
        ),
        migrations.AddField(
            model_name='endowment',
            name='order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.currencyorder'),
        ),
        migrations.AddField(
            model_name='endowment',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='target_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='endowment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='EmailField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(help_text='Sign up for our newsletter to get the latest news and gossip! We will never share your personal information with anyone without your explicit permission. Unsubscribe at any time.', max_length=254, unique=True)),
                ('confirmation', models.BooleanField(help_text='By clicking this box, I agree to receive emails, coupons and discounts from PokeTrove. I also understand that I may unsubscribe at any time and PokeTrove will not share my personal information with anyone without my explicit permission.')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Email',
                'verbose_name_plural': 'Emails',
            },
        ),
        migrations.CreateModel(
            name='EarnedAchievements',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(blank=True, null=True, verbose_name='Achievement Title')),
                ('slug', autoslug.fields.AutoSlugField(unique=True)),
                ('value', models.IntegerField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('image_length', models.PositiveIntegerField(blank=True, default=100, help_text='Original length of the advertisement (use for original ratio).', null=True, verbose_name='image length')),
                ('image_width', models.PositiveIntegerField(blank=True, default=100, help_text='Original width of the advertisement (use for original ratio).', null=True, verbose_name='image width')),
                ('category', models.CharField(blank=True, choices=[('RS', 'Rubies Spent'), ('TRE', 'Total Rubies Earned '), ('RC', 'Rubies Collected'), ('WS', 'Wheels Spun'), ('GCH', 'Green Cards Hit'), ('YCH', 'Yellow Cards Hit'), ('OCH', 'Orange Cards Hit'), ('RCH', 'Red Cards Hit'), ('BCH', 'Black Cards Hit'), ('GOCH', 'Gold Cards Hit'), ('RGCH', 'Red Gold Cards Hit'), ('BW', 'Battles Won'), ('BL', 'Battles Lost'), ('BD', 'Battles Drawn'), ('FA', 'Friends Added'), ('TCS', 'Total Community Size'), ('O', 'Other')], max_length=4, null=True)),
                ('rubies_spent', models.IntegerField(blank=True, null=True)),
                ('rubies_collected', models.IntegerField(blank=True, null=True)),
                ('total_rubies_earned', models.IntegerField(blank=True, null=True)),
                ('earned', models.BooleanField(default=False)),
                ('green_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('yellow_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('orange_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('red_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('black_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('gold_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('redgold_counter', models.IntegerField(blank=True, default=0, null=True)),
                ('date_and_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='date and time')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.achievements')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.gamehub')),
                ('user', models.ManyToManyField(related_name='earner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Earned Achievement',
                'verbose_name_plural': 'Earned Achievements',
            },
        ),
        migrations.CreateModel(
            name='DonorBackgroundImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('cover', models.ImageField(upload_to='images/')),
                ('donor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Donors Background Image',
                'verbose_name_plural': 'Donors Background Images',
            },
        ),
        migrations.CreateModel(
            name='Donate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('nickname', models.CharField(blank=True, max_length=100, null=True)),
                ('anonymous', models.BooleanField(default=False, help_text='Donate anonymously?')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('donor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Donation',
                'verbose_name_plural': 'Donations',
            },
        ),
        migrations.CreateModel(
            name='DegeneratePlaylistLibrary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('category', models.CharField(default=None, max_length=100, null=True)),
                ('artist', models.CharField(max_length=100, null=True)),
                ('audio_file', models.FileField(upload_to='audio/')),
                ('audio_img', models.FileField(upload_to='audio_img/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Degenerate Playist Library',
                'verbose_name_plural': 'Degenerate Playist Libraries',
            },
        ),
        migrations.CreateModel(
            name='DegeneratePlaylist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audio_file', models.FileField(blank=True, null=True, upload_to='audio/')),
                ('audio_img', models.FileField(blank=True, null=True, upload_to='audio_img/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('song', models.ManyToManyField(to='showcase.degenerateplaylistlibrary')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Degenerate Playist',
                'verbose_name_plural': 'Degenerate Playists',
            },
        ),
        migrations.CreateModel(
            name='DailySpin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cooldown', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_spins', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='currencyorder',
            name='payment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='showcase.payment'),
        ),
        migrations.AddField(
            model_name='currencyorder',
            name='shipping_address',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='currency_shipping_address', to='showcase.address'),
        ),
        migrations.AddField(
            model_name='currencyorder',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='CurrencyFullOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref_code', models.CharField(blank=True, max_length=20, null=True)),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('ordered_date', models.DateTimeField()),
                ('ordered', models.BooleanField(default=False)),
                ('being_delivered', models.BooleanField(default=False)),
                ('received', models.BooleanField(default=False)),
                ('refund_requested', models.BooleanField(default=False)),
                ('refund_granted', models.BooleanField(default=False)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Is this an active order?')),
                ('coupon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='showcase.coupon')),
                ('itemhistory', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.currencymarket', verbose_name='Order history')),
                ('items', models.ManyToManyField(to='showcase.currencyorder')),
                ('payment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='showcase.payment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Total Currency Order',
                'verbose_name_plural': 'Total Currency Orders',
            },
        ),
        migrations.CreateModel(
            name='CommerceExchange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_usercard_value', models.IntegerField(blank=True, null=True)),
                ('total_prize_value', models.IntegerField(blank=True, null=True)),
                ('value_descrepancy', models.IntegerField(blank=True, null=True)),
                ('mfg_date', models.DateTimeField(auto_now_add=True, verbose_name='date')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.currency')),
                ('prizes', models.ManyToManyField(to='showcase.exchangeprize')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('usercard', models.ManyToManyField(to='showcase.tradeitem')),
            ],
            options={
                'verbose_name': 'Commerce Exchange',
                'verbose_name_plural': 'Commerce Exchanges',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('name', models.CharField(max_length=80)),
                ('email', models.EmailField(max_length=254)),
                ('body', models.TextField()),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True, verbose_name='Post comment?')),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('commentator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='showcase.blog')),
            ],
            options={
                'ordering': ['created_on'],
            },
        ),
        migrations.AddField(
            model_name='choice',
            name='currency',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.currency'),
        ),
        migrations.AddField(
            model_name='choice',
            name='game',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='choice_fk_set', to='showcase.game'),
        ),
        migrations.AddField(
            model_name='choice',
            name='prizes',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.prizepool'),
        ),
        migrations.AddField(
            model_name='choice',
            name='shufflers',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.shuffler'),
        ),
        migrations.AddField(
            model_name='choice',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='CheckoutAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street_address', models.CharField(max_length=100)),
                ('apartment_address', models.CharField(max_length=100)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('zip', models.CharField(max_length=100)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Is this an active address?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Checkout Addresses',
            },
        ),
        migrations.CreateModel(
            name='BlogTips',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tip', models.TextField(unique=True)),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='updated on: ')),
                ('position', models.IntegerField(blank=True, null=True)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='blog_tips', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Blog Tip',
                'verbose_name_plural': 'Blog Tips',
            },
        ),
        migrations.AddField(
            model_name='blog',
            name='category',
            field=models.ForeignKey(blank=True, help_text='Optional', null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.blogheader', verbose_name='Category'),
        ),
        migrations.AddField(
            model_name='blog',
            name='dislikes',
            field=models.ManyToManyField(blank=True, related_name='post_dislikes', to=settings.AUTH_USER_MODEL, verbose_name='post dislikes'),
        ),
        migrations.AddField(
            model_name='blog',
            name='filters',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.blogfilter', verbose_name='Hashtag filters'),
        ),
        migrations.AddField(
            model_name='blog',
            name='likes',
            field=models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='post likes'),
        ),
        migrations.CreateModel(
            name='Bet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(default=5, validators=[django.core.validators.MinValueValidator(1)])),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('battle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.battle')),
                ('profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.profiledetails')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('winning_team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='winningteam', to=settings.AUTH_USER_MODEL)),
                ('winning_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='winninguser', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BattleParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_bot', models.BooleanField(default=False)),
                ('battle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='battle_joined', to='showcase.battle')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Battle Participant',
                'verbose_name_plural': 'Battle Participants',
            },
        ),
        migrations.CreateModel(
            name='BattleGame',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('order', models.PositiveIntegerField(default=0)),
                ('battle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='battle_games', to='showcase.battle')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_battles', to='showcase.game')),
            ],
            options={
                'verbose_name': 'Battle Game',
                'verbose_name_plural': 'Battle Games',
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='battle',
            name='chests',
            field=models.ManyToManyField(related_name='battles', through='showcase.BattleGame', to='showcase.game'),
        ),
        migrations.AddField(
            model_name='battle',
            name='creator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='battle',
            name='currency',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.currency'),
        ),
        migrations.AddField(
            model_name='battle',
            name='participants',
            field=models.ManyToManyField(blank=True, limit_choices_to={'is_bot': False}, related_name='battles', to='showcase.battleparticipant'),
        ),
        migrations.AddField(
            model_name='battle',
            name='robots',
            field=models.ManyToManyField(blank=True, limit_choices_to={'is_bot': True}, related_name='battles', to='showcase.robot'),
        ),
        migrations.CreateModel(
            name='Ballot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('selected_option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.voteoption')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('vote_query', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.votequery')),
            ],
        ),
        migrations.CreateModel(
            name='Ascension',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ascension', models.CharField(blank=True, max_length=200, null=True)),
                ('flavor_text', models.CharField(blank=True, choices=[('A', 'Ate the forbidden cookies'), ('B', 'Bit the bullet'), ('C', 'Caught in the act'), ('D', "Doordash'd "), ('E', 'Enigma '), ('S', 'Shacked to a galloping horse'), ('X', 'Xyster to the keister'), ('Z', 'Zapperdoodled')], max_length=1, null=True)),
                ('ascension_number', models.IntegerField(blank=True, editable=False, null=True)),
                ('reward', models.IntegerField(default=1)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Set active?')),
                ('final_level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='necessary_level_to_unlock', to='showcase.level')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.profiledetails')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Ascension',
                'verbose_name_plural': 'Ascensions',
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('multiple_choice_response', models.CharField(blank=True, max_length=100, null=True)),
                ('short_answer_response', models.TextField(blank=True, null=True)),
                ('true_or_false_response', models.BooleanField(blank=True, null=True)),
                ('free_response_response', models.TextField(blank=True, null=True)),
                ('image_field_response', models.ImageField(blank=True, null=True, upload_to='responses/')),
                ('integer_field_response', models.IntegerField(blank=True, null=True)),
                ('decimal_field_response', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('other_response', models.TextField(blank=True, null=True)),
                ('is_active', models.IntegerField(blank=True, choices=[(1, 'Active'), (0, 'Inactive')], default=1, help_text='1->Active, 0->Inactive', null=True, verbose_name='Is this an active order?')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.questionaire')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='affiliation',
            name='unlocking_level',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='level_to_unlock', to='showcase.level'),
        ),
        migrations.AddField(
            model_name='advertisementbase',
            name='correlating_product',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcase.item'),
        ),
        migrations.CreateModel(
            name='AdministrationChangeLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('delete', 'Delete')], max_length=6)),
                ('model', models.CharField(max_length=100)),
                ('object_id', models.CharField(max_length=255)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('changes', models.JSONField(blank=True, null=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Administration Changelog',
                'verbose_name_plural': 'Administration Changelogs',
            },
        ),
        migrations.AddField(
            model_name='achievements',
            name='currency',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.currency'),
        ),
        migrations.AddField(
            model_name='achievements',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='showcase.gamehub'),
        ),
        migrations.AddField(
            model_name='achievements',
            name='user',
            field=models.ManyToManyField(blank=True, related_name='achiever', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Preference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField(help_text='1->Like, 2->Dislike')),
                ('date', models.DateTimeField(auto_now=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_posts', to='showcase.blog')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Blog Like',
                'verbose_name_plural': 'Blog Likes',
                'unique_together': {('user', 'post', 'value')},
            },
        ),
        migrations.AddConstraint(
            model_name='inventorytradeoffer',
            constraint=models.UniqueConstraint(condition=models.Q(('status', 'pending')), fields=('initiator', 'receiver', 'status'), name='unique_pending_trades'),
        ),
        migrations.AlterUniqueTogether(
            name='friendrequest',
            unique_together={('sender', 'receiver')},
        ),
        migrations.AlterUniqueTogether(
            name='friend',
            unique_together={('user', 'friend')},
        ),
        migrations.AlterUniqueTogether(
            name='dailyspin',
            unique_together={('user', 'cooldown')},
        ),
        migrations.AlterUniqueTogether(
            name='bet',
            unique_together={('user', 'battle')},
        ),
        migrations.AlterUniqueTogether(
            name='battlegame',
            unique_together={('battle', 'game')},
        ),
        migrations.AlterUniqueTogether(
            name='ballot',
            unique_together={('user', 'vote_query')},
        ),
    ]
